{"version":3,"sources":["components/Logo/Logo.js","components/JoinGame/JoinGame.js","components/ShowHand/ShowHand.js","components/AskForCard/AskForCard.js","components/MakeClaim/MakeClaim.js","components/PlayerPanel/PlayerPanel.js","components/ShowLastMove/ShowLastMove.js","components/ShowTurnName/ShowTurnName.js","components/RoomList/RoomList.js","App.js","index.js","gameMethods.js"],"names":["Logo","JoinGame","props","addRoomClick","bind","deleteRoomClick","joinRoomClick","state","roomToBeMade","roomToBeJoined","joiningPlayerName","placeholder","type","name","value","this","onChange","updateRoomToBeMadeState","Button","variant","size","onClick","updateJoiningRoomState","updateJoiningPlayerState","event","setState","target","fetch","headers","Accept","method","body","JSON","stringify","roomName","playerName","then","res","text","team","alert","setPlayerForApp","updateHand","React","Component","ShowHand","className","hand","AskForCard","opponents","playerAsked","desiredCard","askForCard","id","updatePlayerAskedState","selected","updatedesiredCardState","room","console","log","player","document","getElementById","selectedIndex","askCardFunc","MakeClaim","makeClaim","htmlFor","teammates","teammate1Cards","setTeammate1ClaimState","teammate2Cards","setTeammate2ClaimState","teammate3Cards","setTeammate3ClaimState","listOfCards","split","playerCardsList","push","makeClaimFunc","PlayerPanel","processTeammates","processOpponents","teamScore","opponentsScore","join","ShowLastMove","move","ShowTurnName","turn","RoomList","processRoomsIntoList","rooms","list","forEach","err","App","opponentName","teamName","setPlayer","refreshState","getTeammates","getOpponents","getLastMove","getTurnName","json","allRooms","Object","keys","getRoom","getRooms","setInterval","handString","players","sort","first","second","slice","localeCompare","score","claims","length","opponentTeam","lastMove","currTurn","displayRoomList","inSameHalfSuit","ReactDOM","render","StrictMode","require","deleteCards","cards","getPlayerHand","playerHand","card","cardIndex","indexOf","splice","callBack","response","jsonResponse","card1","card2","card1Index","card2Index","Math","floor","module","exports","teamAsking","playerAsking","canAsk","reduce","acc","cardInHand","teamAsked","addCard","moveString","cardsInClaim","claim","lastCard","pop","allInSameHalfSuit","makeClaimHelp","claimsLeft","currentPair","initHand","contains","completeClaim","completeClaimString","flat","toString","existingClaims","curPlayerName","curCards"],"mappings":"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","file":"static/js/main.4424de00.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Logo.css\";\n\nfunction Logo() {\n  return (\n    <div>\n      <h1>Fish</h1>\n      <h4>By: Michael Zappa</h4>\n    </div>\n  );\n}\n\nexport default Logo;\n","import React from \"react\";\nimport { Button } from \"react-bootstrap\";\n\nclass JoinGame extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.addRoomClick = this.addRoomClick.bind(this);\n    this.deleteRoomClick = this.deleteRoomClick.bind(this);\n    this.joinRoomClick = this.joinRoomClick.bind(this);\n\n    this.state = {\n      roomToBeMade: \"\",\n      roomToBeJoined: \"\",\n      joiningPlayerName: \"\",\n    };\n  }\n\n  render() {\n    return (\n      <div>\n        <div>\n          <form>\n            <input\n              placeholder=\"Room Name\"\n              type=\"text\"\n              name=\"Room name\"\n              value={this.state.roomToBeMade}\n              onChange={this.updateRoomToBeMadeState.bind(this)}\n            />\n            <Button variant=\"primary\" size=\"lg\" onClick={this.addRoomClick}>\n              Add Room\n            </Button>\n            <Button variant=\"primary\" size=\"lg\" onClick={this.deleteRoomClick}>\n              Delete Room\n            </Button>\n          </form>\n        </div>\n        <div>\n          <form>\n            <input\n              placeholder=\"Room Name\"\n              type=\"text\"\n              name=\"Room name\"\n              value={this.state.roomToBeJoined}\n              onChange={this.updateJoiningRoomState.bind(this)}\n            />\n            <input\n              placeholder=\"Player Name\"\n              type=\"text\"\n              name=\"Player name\"\n              value={this.state.joiningPlayerName}\n              onChange={this.updateJoiningPlayerState.bind(this)}\n            />\n            <Button variant=\"primary\" size=\"lg\" onClick={this.joinRoomClick}>\n              Submit\n            </Button>\n          </form>\n        </div>\n        <div></div>\n      </div>\n    );\n  }\n\n  updateRoomToBeMadeState(event) {\n    this.setState({ roomToBeMade: event.target.value });\n  }\n\n  updateJoiningRoomState(event) {\n    this.setState({ roomToBeJoined: event.target.value });\n  }\n\n  updateJoiningPlayerState(event) {\n    this.setState({ joiningPlayerName: event.target.value });\n  }\n\n  // posts the room represented by the state of this component\n  addRoomClick() {\n    fetch(\"https://fish-backend.herokuapp.com/rooms/\", {\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n      },\n      method: \"POST\",\n      body: JSON.stringify({ name: this.state.roomToBeMade }),\n    });\n\n    this.setState({\n      roomToBeMade: \"\",\n      roomToBeJoined: \"\",\n      joiningPlayerName: \"\",\n    });\n  }\n\n  // deletes the room represented by the state of this component\n  deleteRoomClick() {\n    fetch(\"https://fish-backend.herokuapp.com/rooms/\", {\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n      },\n      method: \"DELETE\",\n      body: JSON.stringify({ name: this.state.roomToBeMade }),\n    });\n\n    this.setState({\n      roomToBeMade: \"\",\n      roomToBeJoined: \"\",\n      joiningPlayerName: \"\",\n    });\n  }\n\n  // posts the player to the room represented by the state of this component\n  joinRoomClick() {\n    let roomName = this.state.roomToBeJoined;\n    let playerName = this.state.joiningPlayerName;\n    fetch(\"https://fish-backend.herokuapp.com/rooms/\" + roomName, {\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n      },\n      method: \"POST\",\n      body: JSON.stringify({ name: playerName }),\n    })\n      .then((res) => res.text())\n      .then((team) => {\n        if (team === \"Given room does not exist\") {\n          alert(\"Please enter a room which has been created\");\n        } else {\n          this.props.setPlayerForApp(roomName, team, playerName);\n          this.props.updateHand();\n          this.setState({\n            roomToBeMade: \"\",\n            roomToBeJoined: \"\",\n            joiningPlayerName: \"\",\n          });\n        }\n      });\n  }\n}\n\nexport default JoinGame;\n","import React from \"react\";\n\nclass ShowHand extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {};\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>{this.props.playerName}'s Hand</h1>\n        <p className=\"App-intro\">{this.props.hand}</p>\n      </div>\n    );\n  }\n}\n\nexport default ShowHand;\n","import React from \"react\";\nimport { Button } from \"react-bootstrap\";\n\n// an interface to ask an opponent player for a specific card\nclass AskForCard extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = { opponents: [], playerAsked: \"\", desiredCard: \"\" };\n\n    this.askForCard = this.askForCard.bind(this);\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Ask a Player for a Card</h1>\n        <form>\n          <select\n            id=\"choose-opponent\"\n            onChange={this.updatePlayerAskedState.bind(this)}\n          >\n            <option selected=\"selected\">Select Opponent</option>\n            <option value={this.props.opponents[0]}>\n              {this.props.opponents[0]}\n            </option>\n            <option value={this.props.opponents[1]}>\n              {this.props.opponents[1]}\n            </option>\n            <option value={this.props.opponents[2]}>\n              {this.props.opponents[2]}\n            </option>\n          </select>\n          <input\n            placeholder=\"Card\"\n            type=\"text\"\n            name=\"card\"\n            value={this.state.desiredCard}\n            onChange={this.updatedesiredCardState.bind(this)}\n          />\n          <Button variant=\"primary\" size=\"lg\" onClick={this.askForCard}>\n            Ask for Card\n          </Button>\n        </form>\n      </div>\n    );\n  }\n\n  // sets the playerAsked state\n  updatePlayerAskedState(event) {\n    this.setState({ playerAsked: event.target.value });\n  }\n\n  // sets the desired card state\n  updatedesiredCardState(event) {\n    this.setState({ desiredCard: event.target.value });\n  }\n\n  // uses the state to ask the player for the desired card\n  askForCard() {\n    fetch(\n      \"https://fish-backend.herokuapp.com/rooms/\" + this.props.room + \"/turn/\"\n    )\n      .then((res) => res.text())\n      .then((res) => {\n        console.log(res + \"   \" + this.props.player);\n        if (res === this.props.player) {\n          document.getElementById(\"choose-opponent\").selectedIndex = 0;\n          if (\n            this.state.playerAsked !== \"Select Opponent\" &&\n            this.state.playerAsked !== \"\"\n          ) {\n            this.props.askCardFunc(\n              this.props.room,\n              this.props.team,\n              this.props.player,\n              this.state.playerAsked,\n              this.state.desiredCard\n            );\n          }\n          this.setState({ playerAsked: \"\", desiredCard: \"\" });\n        }\n      });\n  }\n}\n\nexport default AskForCard;\n","import React from \"react\";\nimport { Button } from \"react-bootstrap\";\n\nclass MakeClaim extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {};\n\n    this.makeClaim = this.makeClaim.bind(this);\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>\n          Make Claim, enter cards for each teammate<br></br> separated by\n          commas: \"card,card,card,card,card,card\"\n        </h1>\n        <form>\n          <label htmlFor=\"name1\">{this.props.teammates[0]}</label>\n          <input\n            placeholder=\"cards\"\n            type=\"text\"\n            id=\"name1\"\n            value={this.state.teammate1Cards}\n            onChange={this.setTeammate1ClaimState.bind(this)}\n          />\n          <label htmlFor=\"name1\">{this.props.teammates[1]}</label>\n          <input\n            placeholder=\"cards\"\n            type=\"text\"\n            id=\"name2\"\n            value={this.state.teammate2Cards}\n            onChange={this.setTeammate2ClaimState.bind(this)}\n          />\n          <label htmlFor=\"name1\">{this.props.teammates[2]}</label>\n          <input\n            placeholder=\"cards\"\n            type=\"text\"\n            id=\"name3\"\n            value={this.state.teammate3Cards}\n            onChange={this.setTeammate3ClaimState.bind(this)}\n          />\n          <Button variant=\"primary\" size=\"lg\" onClick={this.makeClaim}>\n            Submit Claim\n          </Button>\n        </form>\n      </div>\n    );\n  }\n\n  // sets a state for the cards claimed to be had by teammate 1\n  setTeammate1ClaimState(event) {\n    let listOfCards = event.target.value.split(\",\");\n    this.setState({ teammate1Cards: listOfCards });\n  }\n\n  // sets a state for the cards claimed to be had by teammate 2\n  setTeammate2ClaimState(event) {\n    let listOfCards = event.target.value.split(\",\");\n    this.setState({ teammate2Cards: listOfCards });\n  }\n\n  // sets a state for the cards claimed to be had by teammate 3\n  setTeammate3ClaimState(event) {\n    let listOfCards = event.target.value.split(\",\");\n    this.setState({ teammate3Cards: listOfCards });\n  }\n\n  // takes the cards claimed in the state and attempts to make the claim,\n  // if it is a good claim the cards are removed from the players' hands\n  // and added to this team's claims tally\n  makeClaim() {\n    let playerCardsList = [];\n    if (this.state.teammate1Cards) {\n      playerCardsList.push([\n        this.props.teammates[0],\n        this.state.teammate1Cards,\n      ]);\n    }\n    if (this.state.teammate2Cards) {\n      playerCardsList.push([\n        this.props.teammates[1],\n        this.state.teammate2Cards,\n      ]);\n    }\n    if (this.state.teammate3Cards) {\n      playerCardsList.push([\n        this.props.teammates[2],\n        this.state.teammate3Cards,\n      ]);\n    }\n\n    console.log(playerCardsList);\n    this.props.makeClaimFunc(this.props.room, this.props.team, playerCardsList);\n\n    this.setState({\n      teammate1Cards: \"\",\n      teammate2Cards: \"\",\n      teammate3Cards: \"\",\n    });\n  }\n}\n\nexport default MakeClaim;\n","import React from \"react\";\n\n// shows the teammates and opponents of the player of this app\nclass PlayerPanel extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.processTeammates = this.processTeammates.bind(this);\n    this.processOpponents = this.processOpponents.bind(this);\n  }\n\n  render() {\n    return (\n      <div>\n        <h2>\n          Teammates: {this.processTeammates()} <br></br>Score:{\" \"}\n          {this.props.teamScore}\n        </h2>\n        <h2>\n          Opponents: {this.processOpponents()} <br></br>Score:{\" \"}\n          {this.props.opponentsScore}\n        </h2>\n      </div>\n    );\n  }\n\n  // turns list of players into a string\n  processTeammates() {\n    if (this.props.teammates) {\n      return this.props.teammates.join(\", \");\n    }\n  }\n\n  // turns list of players into a string\n  processOpponents() {\n    if (this.props.opponents) {\n      return this.props.opponents.join(\", \");\n    }\n  }\n}\n\nexport default PlayerPanel;\n","import React from \"react\";\n\nclass ShowLastMove extends React.Component {\n  render() {\n    return (\n      <div>\n        <h1>Last move: {this.props.move}</h1>\n      </div>\n    );\n  }\n}\n\nexport default ShowLastMove;\n","import React from \"react\";\n\nclass ShowTurnName extends React.Component {\n  render() {\n    return (\n      <div>\n        <h1>Current Turn: {this.props.turn}</h1>\n      </div>\n    );\n  }\n}\n\nexport default ShowTurnName;\n","import React from \"react\";\n\nclass RoomList extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.processRoomsIntoList = this.processRoomsIntoList.bind(this);\n  }\n  render() {\n    return (\n      <div>\n        Rooms:\n        <ul>{this.processRoomsIntoList(this.props.rooms)}</ul>\n      </div>\n    );\n  }\n\n  // returns an unordered list of all the rooms in the server,\n  // from the prop which is a list of all these rooms\n  processRoomsIntoList(rooms) {\n    let list = [];\n    try {\n      rooms.forEach((room) => {\n        list.push(<li>{room}</li>);\n      });\n      return list;\n    } catch (err) {\n      console.log(err);\n    }\n    //return <li>5</li>\n  }\n}\n\nexport default RoomList;\n","import React from \"react\";\nimport \"./App.css\";\nimport Logo from \"./components/Logo/Logo\";\nimport JoinGame from \"./components/JoinGame/JoinGame\";\nimport ShowHand from \"./components/ShowHand/ShowHand\";\nimport AskForCard from \"./components/AskForCard/AskForCard\";\nimport MakeClaim from \"./components/MakeClaim/MakeClaim\";\nimport PlayerPanel from \"./components/PlayerPanel/PlayerPanel\";\nimport ShowLastMove from \"./components/ShowLastMove/ShowLastMove\";\nimport ShowTurnName from \"./components/ShowTurnName/ShowTurnName\";\nimport RoomList from \"./components/RoomList/RoomList\";\n\nimport { askForCard, makeClaim, inSameHalfSuit } from \"./gameMethods\";\n\n// the main App of this Fish game, keeps the state, which is passed to children components\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      room: \"\",\n      team: \"\",\n      player: \"\",\n      teammates: [],\n      teamScore: 0,\n      opponents: [],\n      opponentsScore: 0,\n      opponentName: \"\",\n      move: \"\",\n      turn: \"\",\n      roomName: \"\",\n      teamName: \"\",\n      playerName: \"\",\n    };\n\n    this.setPlayer = this.setPlayer.bind(this);\n    this.updateHand = this.updateHand.bind(this);\n    this.refreshState = this.refreshState.bind(this);\n    this.getTeammates = this.getTeammates.bind(this);\n    this.getOpponents = this.getOpponents.bind(this);\n    this.getLastMove = this.getLastMove.bind(this);\n    this.getTurnName = this.getTurnName.bind(this);\n  }\n\n  // sets a state field to be a list of all the different rooms in the server\n  getRooms() {\n    fetch(\"https://fish-backend.herokuapp.com/rooms/\")\n      .then((res) => res.json())\n      .then((res) => {\n        let allRooms = Object.keys(res);\n        this.setState({ rooms: allRooms });\n      });\n  }\n\n  // displays the list of rooms in the server if the app has not joined a room yet\n  displayRoomList() {\n    if (!this.state.room[this.state.teamName]) {\n      return <RoomList rooms={this.state.rooms} />;\n    }\n  }\n\n  // sets a state field to be the overall JSON object for the room\n  // this webapp is playing in from the server\n  getRoom() {\n    fetch(\"https://fish-backend.herokuapp.com/rooms/\" + this.state.roomName)\n      .then((res) => res.json())\n      .then((res) => {\n        console.log(res);\n        this.setState({ room: res });\n      });\n  }\n\n  // sets getDatabase upon startup\n  componentWillMount() {\n    this.getRoom();\n    this.getRooms();\n    setInterval(this.refreshState, 500); // runs every 5 seconds.\n  }\n\n  // refreshes the state of this web app from the data in the server\n  refreshState() {\n    this.getRoom();\n    this.getRooms();\n    this.updateHand();\n    this.getTeammates();\n    this.getOpponents();\n    this.getLastMove();\n    this.getTurnName();\n\n    if (this.state.teamScore > 4) {\n      fetch(\"https://fish-backend.herokuapp.com/rooms/\", {\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\",\n        },\n        method: \"DELETE\",\n        body: JSON.stringify({ name: this.state.room }),\n      }).then((res) => {\n        alert(this.state.teamName + \" has won the game!\");\n      });\n    } else if (this.state.opponentsScore > 4) {\n      fetch(\"https://fish-backend.herokuapp.com/rooms/\", {\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\",\n        },\n        method: \"DELETE\",\n        body: JSON.stringify({ name: this.state.room }),\n      }).then((res) => {\n        alert(this.state.opponentName + \" has won the game!\");\n      });\n    }\n  }\n\n  // sets the room and player of the player of this web app\n  setPlayer(room, team, player) {\n    this.setState({ roomName: room, teamName: team, playerName: player });\n    this.getTeammates();\n    this.getOpponents();\n    this.getLastMove();\n    this.getTurnName();\n  }\n\n  // updates the state of the hand, which is given to the ShowHand component\n  updateHand() {\n    this.getRoom();\n    try {\n      let hand = this.state.room[this.state.teamName].players[\n        this.state.playerName\n      ].hand;\n      let sortedBySuit = hand.sort((first, second) => {\n        return first.slice(-1).localeCompare(second.slice(-1));\n      });\n      // sorting by card number, preserving order of suits\n      let sortedByNumber = sortedBySuit.sort((first, second) => {\n        if (first.slice(-1).localeCompare(second.slice(-1)) === 0) {\n          return first.slice(0, 2).localeCompare(second.slice(0, 2));\n        }\n        return first.slice(-1).localeCompare(second.slice(-1));\n      });\n      let handString = sortedByNumber.join(\", \");\n      this.setState({ hand: handString });\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  // sets a state field to an array of this player's teammates\n  getTeammates() {\n    try {\n      let team = this.state.room[this.state.teamName];\n      if (team) {\n        let players = Object.keys(team.players);\n        let score = team.claims.length;\n        this.setState({ teammates: players, teamScore: score });\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  // sets a state field to an array of this player's opponents\n  getOpponents() {\n    try {\n      let opponentTeam;\n      if (this.state.teamName === \"team1\") {\n        opponentTeam = this.state.room[\"team2\"];\n        this.setState({ opponentName: \"team2\" });\n      } else {\n        opponentTeam = this.state.room[\"team1\"];\n        this.setState({ opponentName: \"team1\" });\n      }\n      if (opponentTeam) {\n        let players = Object.keys(opponentTeam.players);\n        let score = opponentTeam.claims.length;\n        this.setState({ opponents: players, opponentsScore: score });\n        this.setState({\n          opponents: players,\n          opponentsScore: opponentTeam.claims.length,\n        });\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  // updates the state of this app with the last move performed in this game room\n  getLastMove() {\n    if (this.state.room.move) {\n      let lastMove = this.state.room.move;\n      this.setState({ move: lastMove });\n    }\n  }\n\n  // updates the state of this app with the player whose turn it is in this game room\n  getTurnName() {\n    if (this.state.room.turn) {\n      let currTurn = this.state.room.turn;\n      this.setState({ turn: currTurn });\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <Logo />\n          <div className=\"game-information\">\n            {this.displayRoomList()}\n            <JoinGame\n              rooms={this.state.rooms}\n              setPlayerForApp={this.setPlayer}\n              updateHand={this.updateHand}\n            />\n          </div>\n        </header>\n\n        <div className=\"game-information\">\n          <div className=\"game-stat\">\n            <h1>Room: {this.state.roomName}</h1>\n          </div>\n          <div className=\"game-stat\">\n            <PlayerPanel\n              teammates={this.state.teammates}\n              teamScore={this.state.teamScore}\n              opponents={this.state.opponents}\n              opponentsScore={this.state.opponentsScore}\n            />\n          </div>\n          <div className=\"game-stat\">\n            <ShowHand\n              hand={this.state.hand}\n              playerName={this.state.playerName}\n            />\n          </div>\n          <div className=\"game-stat\">\n            <ShowLastMove move={this.state.move} />\n          </div>\n          <div className=\"game-stat\">\n            <ShowTurnName turn={this.state.turn} />\n          </div>\n        </div>\n\n        <div>\n          <AskForCard\n            room={this.state.roomName}\n            team={this.state.teamName}\n            player={this.state.playerName}\n            askCardFunc={askForCard}\n            opponents={this.state.opponents}\n            inSameHalfSuit={inSameHalfSuit}\n          />\n          <MakeClaim\n            room={this.state.roomName}\n            team={this.state.teamName}\n            makeClaimFunc={makeClaim}\n            teammates={this.state.teammates}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n","const fetch = require(\"node-fetch\");\n\n// deletes the specified card from the player specified by room, team, and name\n// cards is an array of cards (strings)\nfunction deleteCards(room, team, playerName, cards) {\n  return getPlayerHand(room, team, playerName, (playerHand) => {\n    cards.forEach((card) => {\n      let cardIndex = playerHand.indexOf(card);\n      if (cardIndex > -1) {\n        playerHand.splice(cardIndex, 1);\n      } else {\n        //does nothing to the player's hand as this card was not in it\n      }\n      return fetch(\n        \"https://fish-backend.herokuapp.com/rooms/\" +\n          room +\n          \"/teams/\" +\n          team +\n          \"/users/\" +\n          playerName,\n        {\n          headers: {\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/json\",\n          },\n          method: \"PUT\",\n          body: JSON.stringify({ hand: playerHand }),\n        }\n      );\n    });\n  });\n}\n\n// adds the specified card to the hand of the player specified by room, team, and name\nfunction addCard(room, team, playerName, card) {\n  return getPlayerHand(room, team, playerName, (playerHand) => {\n    playerHand.push(card);\n    return fetch(\n      \"https://fish-backend.herokuapp.com/rooms/\" +\n        room +\n        \"/teams/\" +\n        team +\n        \"/users/\" +\n        playerName,\n      {\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\",\n        },\n        method: \"PUT\",\n        body: JSON.stringify({ hand: playerHand }),\n      }\n    );\n  });\n}\n\n// performs the action of asking for a card from a player, and the card changing hands\n// if the player asked has it\nfunction askForCard(room, teamAsking, playerAsking, playerAsked, card) {\n  // is the player asking for this card able to ask for this card\n  getPlayerHand(room, teamAsking, playerAsking, (hand) => {\n    let canAsk = hand.reduce((acc, cardInHand) => {\n      console.log(\n        cardInHand + \"   \" + card + \"   \" + inSameHalfSuit(cardInHand, card)\n      );\n      return acc || inSameHalfSuit(cardInHand, card);\n    }, false);\n    console.log(canAsk);\n    if (canAsk === false) {\n      alert(`You cannot ask for ${card}`);\n    } else {\n      let teamAsked = teamAsking === \"team1\" ? \"team2\" : \"team1\";\n\n      // does the player being asked have the desired card?\n      getPlayerHand(room, teamAsked, playerAsked, (hand) => {\n        // find out if the askedPlayer's hand contains the desired card\n        let contains = hand.reduce((acc, cardInHand) => {\n          return acc || cardInHand === card;\n        }, false);\n\n        if (contains) {\n          deleteCards(room, teamAsked, playerAsked, [card]);\n          addCard(room, teamAsking, playerAsking, card);\n\n          let moveString = `${playerAsking} asked for the ${card} from ${playerAsked}, and received it.`;\n          fetch(\"https://fish-backend.herokuapp.com/rooms/\" + room + \"/move/\", {\n            headers: {\n              Accept: \"application/json\",\n              \"Content-Type\": \"application/json\",\n            },\n            method: \"PUT\",\n            body: JSON.stringify({ move: moveString }),\n          });\n\n          // setting the next turn to be for playerAsking\n          fetch(\"https://fish-backend.herokuapp.com/rooms/\" + room + \"/turn/\", {\n            headers: {\n              Accept: \"application/json\",\n              \"Content-Type\": \"application/json\",\n            },\n            method: \"PUT\",\n            body: JSON.stringify({ turn: playerAsking }),\n          });\n        } else {\n          let moveString = `${playerAsking} asked for the ${card} from ${playerAsked}, but ${playerAsked} did not have it.`;\n          fetch(\"https://fish-backend.herokuapp.com/rooms/\" + room + \"/move/\", {\n            headers: {\n              Accept: \"application/json\",\n              \"Content-Type\": \"application/json\",\n            },\n            method: \"PUT\",\n            body: JSON.stringify({ move: moveString }),\n          });\n\n          // setting the next turn to be for the player asked, as they didn't have the requested card\n          fetch(\"https://fish-backend.herokuapp.com/rooms/\" + room + \"/turn/\", {\n            headers: {\n              Accept: \"application/json\",\n              \"Content-Type\": \"application/json\",\n            },\n            method: \"PUT\",\n            body: JSON.stringify({ turn: playerAsked }),\n          });\n        }\n      });\n    }\n  });\n}\n\n// gets the hand of the specified player and performs the given callback function on it\nfunction getPlayerHand(room, team, playerName, callBack) {\n  return fetch(\n    \"https://fish-backend.herokuapp.com/rooms/\" +\n      room +\n      \"/teams/\" +\n      team +\n      \"/users/\" +\n      playerName\n  )\n    .then((response) => response.json())\n    .then((jsonResponse) => {\n      let playerHand = jsonResponse.hand;\n\n      callBack(playerHand);\n    });\n}\n\n// checks the validity of the given claim, and if it is valid submits the claim\n// claims is a list of [playerName, card] pairs, or a name:, card: object\nfunction makeClaim(room, team, claims) {\n  // checking to see if all the cards are in the same half suit, and there are six of them,\n  // as in a valid claim\n  let cardsInClaim = [];\n  claims.forEach((claim) => {\n    claim[1].forEach((card) => {\n      cardsInClaim.push(card);\n    });\n  });\n\n  console.log(cardsInClaim);\n\n  // if all the cards could be a valid claim, then we check if each player has what they\n  // are said to have and if the claim consists of six cards\n  if (allInSameHalfSuit(cardsInClaim) && cardsInClaim.length === 6) {\n    // calling the helper, and duplicating the claims array for the accumulator\n    makeClaimHelp(room, team, claims, claims.slice());\n  } else {\n    alert(\"That was not a valid claim\");\n  }\n}\n\n// checks the validity of a claim, keeping track of which [player, cards]\n// have yet to be checked, and maintaing the original list of claims for\n// processing should they all be valid claims\nfunction makeClaimHelp(room, team, claims, claimsLeft) {\n  let currentPair = claimsLeft.pop();\n\n  if (currentPair) {\n    let playerName = currentPair[0];\n\n    let cards = currentPair[1];\n\n    getPlayerHand(room, team, playerName, (initHand) => {\n      // find out if the askedPlayer's hand contains the desired card\n      let contains;\n      if (cards) {\n        contains = cards.reduce((acc, cardInHand) => {\n          console.log(\n            `${playerName} has card ${cardInHand}: ${initHand.indexOf(\n              cardInHand > -1\n            )}`\n          );\n          return acc || initHand.indexOf(cardInHand) > -1;\n        }, false);\n      }\n\n      if (contains) {\n        if (claimsLeft.length > 0) {\n          makeClaimHelp(room, team, claims, claimsLeft);\n        } else {\n          // putting the claimed cards together, to be added to the team's claims\n          let completeClaim = [];\n          claims.forEach((claim) => {\n            completeClaim.push(claim[1]);\n          });\n          // turning the completeClaim array of arrays into something to post to the database\n          let completeClaimString = completeClaim.flat().toString();\n\n          // putting the claim into the team's claim field\n          fetch(\n            \"https://fish-backend.herokuapp.com/rooms/\" +\n              room +\n              \"/teams/\" +\n              team\n          )\n            .then((response) => response.json())\n            .then((jsonResponse) => {\n              let existingClaims = jsonResponse.claims;\n              existingClaims.push(completeClaimString);\n\n              fetch(\n                \"https://fish-backend.herokuapp.com/rooms/\" +\n                  room +\n                  \"/teams/\" +\n                  team,\n                {\n                  headers: {\n                    Accept: \"application/json\",\n                    \"Content-Type\": \"application/json\",\n                  },\n                  method: \"PUT\",\n                  body: JSON.stringify({ claims: existingClaims }),\n                }\n              );\n            });\n\n          claims.forEach((claim) => {\n            let curPlayerName = claim[0];\n            let curCards = claim[1];\n            deleteCards(room, team, curPlayerName, curCards);\n          });\n\n          // setting the last move to be this claim being made\n          let moveString = `${team} made the claim ${completeClaimString}.`;\n          fetch(\"https://fish-backend.herokuapp.com/rooms/\" + room + \"/move/\", {\n            headers: {\n              Accept: \"application/json\",\n              \"Content-Type\": \"application/json\",\n            },\n            method: \"PUT\",\n            body: JSON.stringify({ move: moveString }),\n          });\n        }\n      } else {\n        alert(\"The claim was not correct\");\n      }\n    });\n  }\n}\n\n// all the cards in the game, a 54 card deck\nconst cards = [\n  \"2-H\",\n  \"3-H\",\n  \"4-H\",\n  \"5-H\",\n  \"6-H\",\n  \"7-H\",\n  \"9-H\",\n  \"10-H\",\n  \"J-H\",\n  \"Q-H\",\n  \"K-H\",\n  \"A-H\",\n  \"2-D\",\n  \"3-D\",\n  \"4-D\",\n  \"5-D\",\n  \"6-D\",\n  \"7-D\",\n  \"9-D\",\n  \"10-D\",\n  \"J-D\",\n  \"Q-D\",\n  \"K-D\",\n  \"A-D\",\n  \"2-S\",\n  \"3-S\",\n  \"4-S\",\n  \"5-S\",\n  \"6-S\",\n  \"7-S\",\n  \"9-S\",\n  \"10-S\",\n  \"J-S\",\n  \"Q-S\",\n  \"K-S\",\n  \"A-S\",\n  \"2-C\",\n  \"3-C\",\n  \"4-C\",\n  \"5-C\",\n  \"6-C\",\n  \"7-C\",\n  \"9-C\",\n  \"10-C\",\n  \"J-C\",\n  \"Q-C\",\n  \"K-C\",\n  \"A-C\",\n  \"8-H\",\n  \"8-D\",\n  \"8-S\",\n  \"8-C\",\n  \"B-J\",\n  \"R-J\",\n];\n\n// are these two cards in the same half suit, and thus the owner\n// of one can ask for the other. But it returns false if the two\n// cards are the same card\nfunction inSameHalfSuit(card1, card2) {\n  let card1Index = cards.indexOf(card1);\n  let card2Index = cards.indexOf(card2);\n\n  console.log(card1Index / 6 + \"  \" + card2Index / 6);\n  if (card1Index === card2Index) {\n    return false;\n  }\n  return Math.floor(card1Index / 6) === Math.floor(card2Index / 6);\n}\n\n// are all of the cards in the given list in the same half suit?\nfunction allInSameHalfSuit(cards) {\n  let lastCard = cards.pop();\n  console.log(\"Last card: \" + lastCard);\n\n  let allInSameHalfSuit = cards.reduce((acc, card) => {\n    console.log(\"card being checked: \" + card);\n    return acc && inSameHalfSuit(lastCard, card);\n  }, true);\n  console.log(allInSameHalfSuit);\n  return allInSameHalfSuit;\n}\n\n// updates the state of the hand, which is given to the ShowHand component\nfunction updateHand() {\n  fetch(\n    \"https://fish-backend.herokuapp.com/rooms/\" +\n      this.state.roomName +\n      \"/teams/\" +\n      this.state.teamName +\n      \"/users/\" +\n      this.state.playerName\n  )\n    .then((res) => res.json())\n    .then((res) => {\n      // sorting cards by suit\n      let sortedBySuit = res.hand.sort((first, second) => {\n        return first.slice(-1).localeCompare(second.slice(-1));\n      });\n      // sorting by card number, preserving order of suits\n      let sortedByNumber = sortedBySuit.sort((first, second) => {\n        if (first.slice(-1).localeCompare(second.slice(-1)) === 0) {\n          return first.slice(0, 2).localeCompare(second.slice(0, 2));\n        }\n        return first.slice(-1).localeCompare(second.slice(-1));\n      });\n      let handString = sortedByNumber.join(\", \");\n      this.setState({ hand: handString });\n    });\n}\n\n// sets a state field to an array of this player's teammates\nfunction getTeammates() {\n  fetch(\n    \"https://fish-backend.herokuapp.com/rooms/\" +\n      this.state.roomName +\n      \"/teams/\" +\n      this.state.teamName\n  )\n    .then((res) => res.json())\n    .then((res) => {\n      let players = Object.keys(res.players);\n      let score = res.claims.length;\n      this.setState({ teammates: players, teamScore: score });\n    });\n}\n\n// sets a state field to an array of this player's opponents\nfunction getOpponents() {\n  let opponentTeam;\n  if (this.state.teamName === \"team1\") {\n    opponentTeam = \"team2\";\n  } else {\n    opponentTeam = \"team1\";\n  }\n  fetch(\n    \"https://fish-backend.herokuapp.com/rooms/\" +\n      this.state.roomName +\n      \"/teams/\" +\n      opponentTeam\n  )\n    .then((res) => res.json())\n    .then((res) => {\n      let players = Object.keys(res.players);\n      let score = res.claims.length;\n      this.setState({ opponents: players, opponentsScore: score });\n    });\n}\n\nmodule.exports = {\n  askForCard,\n  makeClaim,\n  inSameHalfSuit,\n  updateHand,\n  getTeammates,\n  getOpponents,\n};\n"],"sourceRoot":""}