{"version":3,"sources":["components/Logo/Logo.js","components/JoinGame/JoinGame.js","components/ShowHand/ShowHand.js","components/AskForCard/AskForCard.js","components/MakeClaim/MakeClaim.js","components/PlayerPanel/PlayerPanel.js","App.js","index.js","gameMethods.js"],"names":["Logo","JoinGame","props","addRoomClick","bind","joinRoomClick","state","roomToBeMade","roomToBeJoined","joiningPlayerName","placeholder","type","name","value","this","onChange","updateRoomToBeMadeState","Button","variant","size","onClick","updateJoiningRoomState","updateJoiningPlayerState","event","setState","target","fetch","headers","Accept","method","body","JSON","stringify","roomName","playerName","then","res","text","team","setPlayerForApp","updateHand","React","Component","ShowHand","className","hand","AskForCard","opponents","playerAsked","desiredCard","askForCard","id","updatePlayerAskedState","selected","updatedesiredCardState","document","getElementById","selectedIndex","askCardFunc","room","player","MakeClaim","makeClaim","htmlFor","teammates","teammate1Cards","setTeammate1ClaimState","teammate2Cards","setTeammate2ClaimState","teammate3Cards","setTeammate3ClaimState","listOfCards","split","playerCardsList","push","console","log","makeClaimFunc","PlayerPanel","processTeammates","processOpponents","teamScore","opponentsScore","join","App","rooms","setPlayer","refreshState","getTeammates","getOpponents","getDatabase","teamName","json","handString","sort","first","second","slice","localeCompare","players","Object","keys","score","claims","length","opponentTeam","inSameHalfSuit","ReactDOM","render","StrictMode","require","deleteCards","cards","getPlayerHand","playerHand","forEach","card","cardIndex","indexOf","splice","callBack","response","jsonResponse","card1","card2","module","exports","teamAsking","playerAsking","reduce","acc","cardInHand","teamAsked","addCard","alert","makeClaimHelp","claimsLeft","currentPair","pop","initHand","contains","completeClaim","claim","completeClaimString","flat","toString","existingClaims","curPlayerName","curCards"],"mappings":"2TAYeA,MATf,WACE,OACE,6BACE,oCACA,mD,QC6GSC,E,kDAhHb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,cAAgB,EAAKA,cAAcD,KAAnB,gBAErB,EAAKE,MAAQ,CACXC,aAAc,GACdC,eAAgB,GAChBC,kBAAmB,IATJ,E,qDAcjB,OACE,6BACE,6BACE,8BACE,2BACEC,YAAY,YACZC,KAAK,OACLC,KAAK,YACLC,MAAOC,KAAKR,MAAMC,aAClBQ,SAAUD,KAAKE,wBAAwBZ,KAAKU,QAE9C,kBAACG,EAAA,EAAD,CAAQC,QAAQ,UAAUC,KAAK,KAAKC,QAASN,KAAKX,cAAlD,YAKJ,6BACE,8BACE,2BACEO,YAAY,YACZC,KAAK,OACLC,KAAK,YACLC,MAAOC,KAAKR,MAAME,eAClBO,SAAUD,KAAKO,uBAAuBjB,KAAKU,QAE7C,2BACEJ,YAAY,cACZC,KAAK,OACLC,KAAK,cACLC,MAAOC,KAAKR,MAAMG,kBAClBM,SAAUD,KAAKQ,yBAAyBlB,KAAKU,QAE/C,kBAACG,EAAA,EAAD,CAAQC,QAAQ,UAAUC,KAAK,KAAKC,QAASN,KAAKT,eAAlD,YAKJ,iC,8CAKkBkB,GACtBT,KAAKU,SAAS,CAAEjB,aAAcgB,EAAME,OAAOZ,U,6CAGtBU,GACrBT,KAAKU,SAAS,CAAEhB,eAAgBe,EAAME,OAAOZ,U,+CAGtBU,GACvBT,KAAKU,SAAS,CAAEf,kBAAmBc,EAAME,OAAOZ,U,qCAKhDa,MAAM,+BAAgC,CACpCC,QAAS,CACPC,OAAQ,mBACR,eAAgB,oBAElBC,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CAAEpB,KAAME,KAAKR,MAAMC,iBAG1CO,KAAKU,SAAS,CACZjB,aAAc,GACdC,eAAgB,GAChBC,kBAAmB,O,sCAKN,IAAD,OACVwB,EAAWnB,KAAKR,MAAME,eACtB0B,EAAapB,KAAKR,MAAMG,kBAC5BiB,MAAM,+BAAiCO,EAAU,CAC/CN,QAAS,CACPC,OAAQ,mBACR,eAAgB,oBAElBC,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CAAEpB,KAAMsB,MAE5BC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GACL,EAAKpC,MAAMqC,gBAAgBN,EAAUK,EAAMJ,GAC3C,EAAKhC,MAAMsC,gBAGf1B,KAAKU,SAAS,CACZjB,aAAc,GACdC,eAAgB,GAChBC,kBAAmB,S,GA5GFgC,IAAMC,WCgBdC,E,kDAhBb,WAAYzC,GAAQ,IAAD,8BACjB,cAAMA,IAEDI,MAAQ,GAHI,E,qDAOjB,OACE,6BACE,4BAAKQ,KAAKZ,MAAMgC,WAAhB,WACA,uBAAGU,UAAU,aAAa9B,KAAKZ,MAAM2C,W,GAXtBJ,IAAMC,WCoFdI,E,kDAjFb,WAAY5C,GAAQ,IAAD,8BACjB,cAAMA,IAEDI,MAAQ,CAAEyC,UAAW,GAAIC,YAAa,GAAIC,YAAa,IAE5D,EAAKC,WAAa,EAAKA,WAAW9C,KAAhB,gBALD,E,qDASjB,OACE,6BACE,uDACA,8BACE,4BACE+C,GAAG,kBACHpC,SAAUD,KAAKsC,uBAAuBhD,KAAKU,OAE3C,4BAAQuC,SAAS,YAAjB,mBACA,4BAAQxC,MAAOC,KAAKZ,MAAM6C,UAAU,IACjCjC,KAAKZ,MAAM6C,UAAU,IAExB,4BAAQlC,MAAOC,KAAKZ,MAAM6C,UAAU,IACjCjC,KAAKZ,MAAM6C,UAAU,IAExB,4BAAQlC,MAAOC,KAAKZ,MAAM6C,UAAU,IACjCjC,KAAKZ,MAAM6C,UAAU,KAY1B,2BACErC,YAAY,OACZC,KAAK,OACLC,KAAK,OACLC,MAAOC,KAAKR,MAAM2C,YAClBlC,SAAUD,KAAKwC,uBAAuBlD,KAAKU,QAE7C,kBAACG,EAAA,EAAD,CAAQC,QAAQ,UAAUC,KAAK,KAAKC,QAASN,KAAKoC,YAAlD,oB,6CASe3B,GACrBT,KAAKU,SAAS,CAAEwB,YAAazB,EAAME,OAAOZ,U,6CAIrBU,GACrBT,KAAKU,SAAS,CAAEyB,YAAa1B,EAAME,OAAOZ,U,mCAK1C0C,SAASC,eAAe,mBAAmBC,cAAgB,EAE9B,oBAA3B3C,KAAKR,MAAM0C,aACgB,KAA3BlC,KAAKR,MAAM0C,aAEXlC,KAAKZ,MAAMwD,YACT5C,KAAKZ,MAAMyD,KACX7C,KAAKZ,MAAMoC,KACXxB,KAAKZ,MAAM0D,OACX9C,KAAKR,MAAM0C,YACXlC,KAAKR,MAAM2C,aAGfnC,KAAKU,SAAS,CAAEwB,YAAa,GAAIC,YAAa,S,GA9EzBR,IAAMC,WCqGhBmB,E,kDArGb,WAAY3D,GAAQ,IAAD,8BACjB,cAAMA,IAEDI,MAAQ,GAEb,EAAKwD,UAAY,EAAKA,UAAU1D,KAAf,gBALA,E,qDASjB,OACE,6BACE,wEAC2C,6BAD3C,0CAIA,8BACE,2BAAO2D,QAAQ,SAASjD,KAAKZ,MAAM8D,UAAU,IAC7C,2BACEtD,YAAY,QACZC,KAAK,OACLwC,GAAG,QACHtC,MAAOC,KAAKR,MAAM2D,eAClBlD,SAAUD,KAAKoD,uBAAuB9D,KAAKU,QAE7C,2BAAOiD,QAAQ,SAASjD,KAAKZ,MAAM8D,UAAU,IAC7C,2BACEtD,YAAY,QACZC,KAAK,OACLwC,GAAG,QACHtC,MAAOC,KAAKR,MAAM6D,eAClBpD,SAAUD,KAAKsD,uBAAuBhE,KAAKU,QAE7C,2BAAOiD,QAAQ,SAASjD,KAAKZ,MAAM8D,UAAU,IAC7C,2BACEtD,YAAY,QACZC,KAAK,OACLwC,GAAG,QACHtC,MAAOC,KAAKR,MAAM+D,eAClBtD,SAAUD,KAAKwD,uBAAuBlE,KAAKU,QAE7C,kBAACG,EAAA,EAAD,CAAQC,QAAQ,UAAUC,KAAK,KAAKC,QAASN,KAAKgD,WAAlD,oB,6CASevC,GACrB,IAAIgD,EAAchD,EAAME,OAAOZ,MAAM2D,MAAM,KAC3C1D,KAAKU,SAAS,CAAEyC,eAAgBM,M,6CAIXhD,GACrB,IAAIgD,EAAchD,EAAME,OAAOZ,MAAM2D,MAAM,KAC3C1D,KAAKU,SAAS,CAAE2C,eAAgBI,M,6CAIXhD,GACrB,IAAIgD,EAAchD,EAAME,OAAOZ,MAAM2D,MAAM,KAC3C1D,KAAKU,SAAS,CAAE6C,eAAgBE,M,kCAOhC,IAAIE,EAAkB,GAClB3D,KAAKR,MAAM2D,gBACbQ,EAAgBC,KAAK,CACnB5D,KAAKZ,MAAM8D,UAAU,GACrBlD,KAAKR,MAAM2D,iBAGXnD,KAAKR,MAAM6D,gBACbM,EAAgBC,KAAK,CACnB5D,KAAKZ,MAAM8D,UAAU,GACrBlD,KAAKR,MAAM6D,iBAGXrD,KAAKR,MAAM+D,gBACbI,EAAgBC,KAAK,CACnB5D,KAAKZ,MAAM8D,UAAU,GACrBlD,KAAKR,MAAM+D,iBAIfM,QAAQC,IAAIH,GACZ3D,KAAKZ,MAAM2E,cAAc/D,KAAKZ,MAAMyD,KAAM7C,KAAKZ,MAAMoC,KAAMmC,GAE3D3D,KAAKU,SAAS,CACZyC,eAAgB,GAChBE,eAAgB,GAChBE,eAAgB,S,GAjGE5B,IAAMC,WCqCfoC,E,kDApCb,WAAY5E,GAAQ,IAAD,8BACjB,cAAMA,IAED6E,iBAAmB,EAAKA,iBAAiB3E,KAAtB,gBACxB,EAAK4E,iBAAmB,EAAKA,iBAAiB5E,KAAtB,gBAJP,E,qDAQjB,OACE,6BACE,0CACcU,KAAKiE,mBADnB,WAC+CjE,KAAKZ,MAAM+E,WAE1D,0CACcnE,KAAKkE,mBADnB,UAC8C,IAC3ClE,KAAKZ,MAAMgF,mB,yCAQlB,GAAIpE,KAAKZ,MAAM8D,UACb,OAAOlD,KAAKZ,MAAM8D,UAAUmB,KAAK,Q,yCAMnC,GAAIrE,KAAKZ,MAAM6C,UACb,OAAOjC,KAAKZ,MAAM6C,UAAUoC,KAAK,U,GAhCb1C,IAAMC,W,OCoKjB0C,E,kDAzJb,WAAYlF,GAAQ,IAAD,8BACjB,cAAMA,IACDI,MAAQ,CAAE+E,MAAO,GAAIrB,UAAW,GAAIjB,UAAW,IAEpD,EAAKuC,UAAY,EAAKA,UAAUlF,KAAf,gBACjB,EAAKoC,WAAa,EAAKA,WAAWpC,KAAhB,gBAClB,EAAKmF,aAAe,EAAKA,aAAanF,KAAlB,gBACpB,EAAKoF,aAAe,EAAKA,aAAapF,KAAlB,gBACpB,EAAKqF,aAAe,EAAKA,aAAarF,KAAlB,gBARH,E,0DAYJ,IAAD,OACZsB,MAAM,+BACHS,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACC,GAAD,OAAS,EAAKZ,SAAS,CAAE6D,MAAOjD,S,2CAKxCtB,KAAK4E,gB,qCAKL5E,KAAK0B,aACL1B,KAAK0E,eACL1E,KAAK2E,iB,gCAIG9B,EAAMrB,EAAMsB,GACpB9C,KAAKU,SAAS,CAAES,SAAU0B,EAAMgC,SAAUrD,EAAMJ,WAAY0B,IAC5D9C,KAAK0E,eACL1E,KAAK2E,iB,mCAIO,IAAD,OACX/D,MACE,+BACEZ,KAAKR,MAAM2B,SACX,UACAnB,KAAKR,MAAMqF,SACX,UACA7E,KAAKR,MAAM4B,YAEZC,MAAK,SAACC,GAAD,OAASA,EAAIwD,UAClBzD,MAAK,SAACC,GAEL,IAUIyD,EAVezD,EAAIS,KAAKiD,MAAK,SAACC,EAAOC,GACvC,OAAOD,EAAME,OAAO,GAAGC,cAAcF,EAAOC,OAAO,OAGnBH,MAAK,SAACC,EAAOC,GAC7C,OAAwD,IAApDD,EAAME,OAAO,GAAGC,cAAcF,EAAOC,OAAO,IACvCF,EAAME,MAAM,EAAG,GAAGC,cAAcF,EAAOC,MAAM,EAAG,IAElDF,EAAME,OAAO,GAAGC,cAAcF,EAAOC,OAAO,OAErBd,KAAK,MACrC,EAAK3D,SAAS,CAAEqB,KAAMgD,S,qCAKZ,IAAD,OACbnE,MACE,+BACEZ,KAAKR,MAAM2B,SACX,UACAnB,KAAKR,MAAMqF,UAEZxD,MAAK,SAACC,GAAD,OAASA,EAAIwD,UAClBzD,MAAK,SAACC,GACL,IAAI+D,EAAUC,OAAOC,KAAKjE,EAAI+D,SAC1BG,EAAQlE,EAAImE,OAAOC,OACvB,EAAKhF,SAAS,CAAEwC,UAAWmC,EAASlB,UAAWqB,S,qCAKrC,IACVG,EADS,OAGXA,EAD0B,UAAxB3F,KAAKR,MAAMqF,SACE,QAEA,QAEjBjE,MACE,+BACEZ,KAAKR,MAAM2B,SACX,UACAwE,GAEDtE,MAAK,SAACC,GAAD,OAASA,EAAIwD,UAClBzD,MAAK,SAACC,GACL,IAAI+D,EAAUC,OAAOC,KAAKjE,EAAI+D,SAC1BG,EAAQlE,EAAImE,OAAOC,OACvB,EAAKhF,SAAS,CAAEuB,UAAWoD,EAASjB,eAAgBoB,S,+BAKxD,OACE,yBAAK1D,UAAU,OACb,4BAAQA,UAAU,cAChB,6BACE,kBAAC,EAAD,OAEF,kBAAC,EAAD,CACEyC,MAAOvE,KAAKR,MAAM+E,MAClB9C,gBAAiBzB,KAAKwE,UACtB9C,WAAY1B,KAAK0B,cAIrB,6BACE,qCAAW1B,KAAKR,MAAM2B,UACtB,kBAAC,EAAD,CACE+B,UAAWlD,KAAKR,MAAM0D,UACtBiB,UAAWnE,KAAKR,MAAM2E,UACtBlC,UAAWjC,KAAKR,MAAMyC,UACtBmC,eAAgBpE,KAAKR,MAAM4E,iBAE7B,kBAAC,EAAD,CAAUrC,KAAM/B,KAAKR,MAAMuC,KAAMX,WAAYpB,KAAKR,MAAM4B,aACxD,kBAAC,EAAD,CACEyB,KAAM7C,KAAKR,MAAM2B,SACjBK,KAAMxB,KAAKR,MAAMqF,SACjB/B,OAAQ9C,KAAKR,MAAM4B,WACnBwB,YAAaR,aACbH,UAAWjC,KAAKR,MAAMyC,UACtB2D,eAAgBA,mBAElB,kBAAC,EAAD,CACE/C,KAAM7C,KAAKR,MAAM2B,SACjBK,KAAMxB,KAAKR,MAAMqF,SACjBd,cAAef,YACfE,UAAWlD,KAAKR,MAAM0D,YAExB,kBAAC/C,EAAA,EAAD,CAAQC,QAAQ,UAAUE,QAASN,KAAKyE,cAAxC,uB,GA7IQ9C,IAAMC,WCRxBiE,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFtD,SAASC,eAAe,U,kBCT1B,IAAM9B,EAAQoF,EAAQ,IAItB,SAASC,EAAYpD,EAAMrB,EAAMJ,EAAY8E,GAC3C,OAAOC,EAActD,EAAMrB,EAAMJ,GAAY,SAACgF,GAC5CF,EAAMG,SAAQ,SAACC,GACb,IAAIC,EAAYH,EAAWI,QAAQF,GAMnC,OALIC,GAAa,GACfH,EAAWK,OAAOF,EAAW,GAIxB3F,EACL,+BACEiC,EACA,UACArB,EACA,UACAJ,EACF,CACEP,QAAS,CACPC,OAAQ,mBACR,eAAgB,oBAElBC,OAAQ,MACRC,KAAMC,KAAKC,UAAU,CAAEa,KAAMqE,YA+DvC,SAASD,EAActD,EAAMrB,EAAMJ,EAAYsF,GAC7C,OAAO9F,EACL,+BACEiC,EACA,UACArB,EACA,UACAJ,GAEDC,MAAK,SAACsF,GAAD,OAAcA,EAAS7B,UAC5BzD,MAAK,SAACuF,GACL,IAAIR,EAAaQ,EAAa7E,KAE9B2E,EAASN,MA4Ef,IAAMF,EAAQ,CACZ,MACA,MACA,MACA,MACA,MACA,MACA,MACA,OACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,OACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,OACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,OACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,OAKF,SAASN,EAAeiB,EAAOC,GAI7B,OAHiBZ,EAAMM,QAAQK,GAGV,IAFJX,EAAMM,QAAQM,GAEW,EAG5CC,EAAOC,QAAU,CAAE5E,WA1LnB,SAAoBS,EAAMoE,EAAYC,EAAchF,EAAaoE,GAE/DH,EAActD,EAAMoE,EAAYC,GAAc,SAACnF,GAK7C,GAJaA,EAAKoF,QAAO,SAACC,EAAKC,GAC7B,OAAOD,GAAOxB,EAAeyB,EAAYf,MACxC,GAKC,CACF,IAAIgB,EAA2B,UAAfL,EAAyB,QAAU,QAGnDd,EAActD,EAAMyE,EAAWpF,GAAa,SAACH,GAE5BA,EAAKoF,QAAO,SAACC,EAAKC,GAC/B,OAAOD,GAAOC,IAAef,KAC5B,KAGDL,EAAYpD,EAAMyE,EAAWpF,EAAa,CAACoE,IA7CrD,SAAiBzD,EAAMrB,EAAMJ,EAAYkF,GAChCH,EAActD,EAAMrB,EAAMJ,GAAY,SAACgF,GAE5C,OADAA,EAAWxC,KAAK0C,GACT1F,EACL,+BACEiC,EACA,UACArB,EACA,UACAJ,EACF,CACEP,QAAS,CACPC,OAAQ,mBACR,eAAgB,oBAElBC,OAAQ,MACRC,KAAMC,KAAKC,UAAU,CAAEa,KAAMqE,SA8B3BmB,CAAQ1E,EAAMoE,EAAYC,EAAcZ,YAd5CkB,MAAM,sBAAD,OAAuBlB,QAkLHtD,UAxI/B,SAAmBH,EAAMrB,EAAMiE,IAQ/B,SAASgC,EAAc5E,EAAMrB,EAAMiE,EAAQiC,GACzC,IAAIC,EAAcD,EAAWE,MAE7B,GAAID,EAAa,CACf,IAAIvG,EAAauG,EAAY,GAEzBzB,EAAQyB,EAAY,GAExBxB,EAActD,EAAMrB,EAAMJ,GAAY,SAACyG,GAErC,IAAIC,EAYJ,GAXI5B,IACF4B,EAAW5B,EAAMiB,QAAO,SAACC,EAAKC,GAM5B,OALAxD,QAAQC,IAAR,UACK1C,EADL,qBAC4BiG,EAD5B,aAC2CQ,EAASrB,QAChDa,GAAc,KAGXD,GAAOS,EAASrB,QAAQa,IAAe,KAC7C,IAGDS,EACF,GAAIJ,EAAWhC,OAAS,EACtB+B,EAAc5E,EAAMrB,EAAMiE,EAAQiC,OAC7B,CAEL,IAAIK,EAAgB,GACpBtC,EAAOY,SAAQ,SAAC2B,GACdD,EAAcnE,KAAKoE,EAAM,OAG3B,IAAIC,EAAsBF,EAAcG,OAAOC,WAE/CvH,EAAM,+BAAiCiC,EAAO,UAAYrB,GACvDH,MAAK,SAACsF,GAAD,OAAcA,EAAS7B,UAC5BzD,MAAK,SAACuF,GACL,IAAIwB,EAAiBxB,EAAanB,OAClC2C,EAAexE,KAAKqE,GAEpBrH,EAAM,+BAAiCiC,EAAO,UAAYrB,EAAM,CAC9DX,QAAS,CACPC,OAAQ,mBACR,eAAgB,oBAElBC,OAAQ,MACRC,KAAMC,KAAKC,UAAU,CAAEuE,OAAQ2C,SAIrC3C,EAAOY,SAAQ,SAAC2B,GACd,IAAIK,EAAgBL,EAAM,GACtBM,EAAWN,EAAM,GACrB/B,EAAYpD,EAAMrB,EAAM6G,EAAeC,WA3DjDb,CAAc5E,EAAMrB,EAAMiE,EAAQA,EAAON,UAsIDS,oB","file":"static/js/main.8d0e9b66.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Logo.css\";\n\nfunction Logo() {\n  return (\n    <div>\n      <h1>Fish</h1>\n      <h4>By: Michael Zappa</h4>\n    </div>\n  );\n}\n\nexport default Logo;\n","import React from \"react\";\nimport { Button } from \"react-bootstrap\";\n\nclass JoinGame extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.addRoomClick = this.addRoomClick.bind(this);\n    this.joinRoomClick = this.joinRoomClick.bind(this);\n\n    this.state = {\n      roomToBeMade: \"\",\n      roomToBeJoined: \"\",\n      joiningPlayerName: \"\",\n    };\n  }\n\n  render() {\n    return (\n      <div>\n        <div>\n          <form>\n            <input\n              placeholder=\"Room Name\"\n              type=\"text\"\n              name=\"Room name\"\n              value={this.state.roomToBeMade}\n              onChange={this.updateRoomToBeMadeState.bind(this)}\n            />\n            <Button variant=\"primary\" size=\"lg\" onClick={this.addRoomClick}>\n              Submit\n            </Button>\n          </form>\n        </div>\n        <div>\n          <form>\n            <input\n              placeholder=\"Room Name\"\n              type=\"text\"\n              name=\"Room name\"\n              value={this.state.roomToBeJoined}\n              onChange={this.updateJoiningRoomState.bind(this)}\n            />\n            <input\n              placeholder=\"Player Name\"\n              type=\"text\"\n              name=\"Player name\"\n              value={this.state.joiningPlayerName}\n              onChange={this.updateJoiningPlayerState.bind(this)}\n            />\n            <Button variant=\"primary\" size=\"lg\" onClick={this.joinRoomClick}>\n              Submit\n            </Button>\n          </form>\n        </div>\n        <div></div>\n      </div>\n    );\n  }\n\n  updateRoomToBeMadeState(event) {\n    this.setState({ roomToBeMade: event.target.value });\n  }\n\n  updateJoiningRoomState(event) {\n    this.setState({ roomToBeJoined: event.target.value });\n  }\n\n  updateJoiningPlayerState(event) {\n    this.setState({ joiningPlayerName: event.target.value });\n  }\n\n  // posts the room represented by the state of this component\n  addRoomClick() {\n    fetch(\"http://localhost:9000/rooms/\", {\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n      },\n      method: \"POST\",\n      body: JSON.stringify({ name: this.state.roomToBeMade }),\n    });\n\n    this.setState({\n      roomToBeMade: \"\",\n      roomToBeJoined: \"\",\n      joiningPlayerName: \"\",\n    });\n  }\n\n  // posts the player to the room represented by the state of this component\n  joinRoomClick() {\n    let roomName = this.state.roomToBeJoined;\n    let playerName = this.state.joiningPlayerName;\n    fetch(\"http://localhost:9000/rooms/\" + roomName, {\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n      },\n      method: \"POST\",\n      body: JSON.stringify({ name: playerName }),\n    })\n      .then((res) => res.text())\n      .then((team) => {\n        this.props.setPlayerForApp(roomName, team, playerName);\n        this.props.updateHand();\n      });\n\n    this.setState({\n      roomToBeMade: \"\",\n      roomToBeJoined: \"\",\n      joiningPlayerName: \"\",\n    });\n  }\n}\n\nexport default JoinGame;\n","import React from \"react\";\n\nclass ShowHand extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {};\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>{this.props.playerName}'s Hand</h1>\n        <p className=\"App-intro\">{this.props.hand}</p>\n      </div>\n    );\n  }\n}\n\nexport default ShowHand;\n","import React from \"react\";\nimport { Button } from \"react-bootstrap\";\n\n// an interface to ask an opponent player for a specific card\nclass AskForCard extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = { opponents: [], playerAsked: \"\", desiredCard: \"\" };\n\n    this.askForCard = this.askForCard.bind(this);\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Ask a Player for a Card</h1>\n        <form>\n          <select\n            id=\"choose-opponent\"\n            onChange={this.updatePlayerAskedState.bind(this)}\n          >\n            <option selected=\"selected\">Select Opponent</option>\n            <option value={this.props.opponents[0]}>\n              {this.props.opponents[0]}\n            </option>\n            <option value={this.props.opponents[1]}>\n              {this.props.opponents[1]}\n            </option>\n            <option value={this.props.opponents[2]}>\n              {this.props.opponents[2]}\n            </option>\n          </select>\n          {/*\n          <input\n            placeholder=\"Player Name\"\n            type=\"text\"\n            name=\"player-name\"\n            value={this.state.playerAsked}\n            onChange={this.updatePlayerAskedState.bind(this)}\n          />\n          */}\n          <input\n            placeholder=\"Card\"\n            type=\"text\"\n            name=\"card\"\n            value={this.state.desiredCard}\n            onChange={this.updatedesiredCardState.bind(this)}\n          />\n          <Button variant=\"primary\" size=\"lg\" onClick={this.askForCard}>\n            Ask for Card\n          </Button>\n        </form>\n      </div>\n    );\n  }\n\n  // sets the playerAsked state\n  updatePlayerAskedState(event) {\n    this.setState({ playerAsked: event.target.value });\n  }\n\n  // sets the desired card state\n  updatedesiredCardState(event) {\n    this.setState({ desiredCard: event.target.value });\n  }\n\n  // uses the state to ask the player for the desired card\n  askForCard() {\n    document.getElementById(\"choose-opponent\").selectedIndex = 0;\n    if (\n      this.state.playerAsked !== \"Select Opponent\" &&\n      this.state.playerAsked !== \"\"\n    ) {\n      this.props.askCardFunc(\n        this.props.room,\n        this.props.team,\n        this.props.player,\n        this.state.playerAsked,\n        this.state.desiredCard\n      );\n    }\n    this.setState({ playerAsked: \"\", desiredCard: \"\" });\n  }\n}\n\nexport default AskForCard;\n","import React from \"react\";\nimport { Button } from \"react-bootstrap\";\n\nclass MakeClaim extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {};\n\n    this.makeClaim = this.makeClaim.bind(this);\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>\n          Make Claim, enter cards for each teammate<br></br> separated by\n          commas: \"card,card,card\"\n        </h1>\n        <form>\n          <label htmlFor=\"name1\">{this.props.teammates[0]}</label>\n          <input\n            placeholder=\"cards\"\n            type=\"text\"\n            id=\"name1\"\n            value={this.state.teammate1Cards}\n            onChange={this.setTeammate1ClaimState.bind(this)}\n          />\n          <label htmlFor=\"name1\">{this.props.teammates[1]}</label>\n          <input\n            placeholder=\"cards\"\n            type=\"text\"\n            id=\"name2\"\n            value={this.state.teammate2Cards}\n            onChange={this.setTeammate2ClaimState.bind(this)}\n          />\n          <label htmlFor=\"name1\">{this.props.teammates[2]}</label>\n          <input\n            placeholder=\"cards\"\n            type=\"text\"\n            id=\"name3\"\n            value={this.state.teammate3Cards}\n            onChange={this.setTeammate3ClaimState.bind(this)}\n          />\n          <Button variant=\"primary\" size=\"lg\" onClick={this.makeClaim}>\n            Submit Claim\n          </Button>\n        </form>\n      </div>\n    );\n  }\n\n  // sets a state for the cards claimed to be had by teammate 1\n  setTeammate1ClaimState(event) {\n    let listOfCards = event.target.value.split(\",\");\n    this.setState({ teammate1Cards: listOfCards });\n  }\n\n  // sets a state for the cards claimed to be had by teammate 2\n  setTeammate2ClaimState(event) {\n    let listOfCards = event.target.value.split(\",\");\n    this.setState({ teammate2Cards: listOfCards });\n  }\n\n  // sets a state for the cards claimed to be had by teammate 3\n  setTeammate3ClaimState(event) {\n    let listOfCards = event.target.value.split(\",\");\n    this.setState({ teammate3Cards: listOfCards });\n  }\n\n  // takes the cards claimed in the state and attempts to make the claim,\n  // if it is a good claim the cards are removed from the players' hands\n  // and added to this team's claims tally\n  makeClaim() {\n    let playerCardsList = [];\n    if (this.state.teammate1Cards) {\n      playerCardsList.push([\n        this.props.teammates[0],\n        this.state.teammate1Cards,\n      ]);\n    }\n    if (this.state.teammate2Cards) {\n      playerCardsList.push([\n        this.props.teammates[1],\n        this.state.teammate2Cards,\n      ]);\n    }\n    if (this.state.teammate3Cards) {\n      playerCardsList.push([\n        this.props.teammates[2],\n        this.state.teammate3Cards,\n      ]);\n    }\n\n    console.log(playerCardsList);\n    this.props.makeClaimFunc(this.props.room, this.props.team, playerCardsList);\n\n    this.setState({\n      teammate1Cards: \"\",\n      teammate2Cards: \"\",\n      teammate3Cards: \"\",\n    });\n  }\n}\n\nexport default MakeClaim;\n","import React from \"react\";\n\n// shows the teammates and opponents of the player of this app\nclass PlayerPanel extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.processTeammates = this.processTeammates.bind(this);\n    this.processOpponents = this.processOpponents.bind(this);\n  }\n\n  render() {\n    return (\n      <div>\n        <h2>\n          Teammates: {this.processTeammates()} Score: {this.props.teamScore}\n        </h2>\n        <h2>\n          Opponents: {this.processOpponents()} Score:{\" \"}\n          {this.props.opponentsScore}\n        </h2>\n      </div>\n    );\n  }\n\n  // turns list of players into a string\n  processTeammates() {\n    if (this.props.teammates) {\n      return this.props.teammates.join(\", \");\n    }\n  }\n\n  // turns list of players into a string\n  processOpponents() {\n    if (this.props.opponents) {\n      return this.props.opponents.join(\", \");\n    }\n  }\n}\n\nexport default PlayerPanel;\n","import React from \"react\";\nimport \"./App.css\";\nimport Logo from \"./components/Logo/Logo\";\nimport JoinGame from \"./components/JoinGame/JoinGame\";\nimport ShowHand from \"./components/ShowHand/ShowHand\";\nimport AskForCard from \"./components/AskForCard/AskForCard\";\nimport MakeClaim from \"./components/MakeClaim/MakeClaim\";\nimport PlayerPanel from \"./components/PlayerPanel/PlayerPanel\";\n\nimport { Button } from \"react-bootstrap\";\nimport { askForCard, makeClaim, inSameHalfSuit } from \"./gameMethods\";\n\n// the main App of this Fish game, keeps the state, which is passed to children components\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { rooms: \"\", teammates: [], opponents: [] };\n\n    this.setPlayer = this.setPlayer.bind(this);\n    this.updateHand = this.updateHand.bind(this);\n    this.refreshState = this.refreshState.bind(this);\n    this.getTeammates = this.getTeammates.bind(this);\n    this.getOpponents = this.getOpponents.bind(this);\n  }\n\n  // sets a state field to be the overall JSON object stored in the server\n  getDatabase() {\n    fetch(\"http://localhost:9000/rooms\")\n      .then((res) => res.text())\n      .then((res) => this.setState({ rooms: res }));\n  }\n\n  // sets getDatabase upon startup\n  componentWillMount() {\n    this.getDatabase();\n  }\n\n  // refreshes the state of this web app from the data in the server\n  refreshState() {\n    this.updateHand();\n    this.getTeammates();\n    this.getOpponents();\n  }\n\n  // sets the room and player of the player of this web app\n  setPlayer(room, team, player) {\n    this.setState({ roomName: room, teamName: team, playerName: player });\n    this.getTeammates();\n    this.getOpponents();\n  }\n\n  // updates the state of the hand, which is given to the ShowHand component\n  updateHand() {\n    fetch(\n      \"http://localhost:9000/rooms/\" +\n        this.state.roomName +\n        \"/teams/\" +\n        this.state.teamName +\n        \"/users/\" +\n        this.state.playerName\n    )\n      .then((res) => res.json())\n      .then((res) => {\n        // sorting cards by suit\n        let sortedBySuit = res.hand.sort((first, second) => {\n          return first.slice(-1).localeCompare(second.slice(-1));\n        });\n        // sorting by card number, preserving order of suits\n        let sortedByNumber = sortedBySuit.sort((first, second) => {\n          if (first.slice(-1).localeCompare(second.slice(-1)) === 0) {\n            return first.slice(0, 2).localeCompare(second.slice(0, 2));\n          }\n          return first.slice(-1).localeCompare(second.slice(-1));\n        });\n        let handString = sortedByNumber.join(\", \");\n        this.setState({ hand: handString });\n      });\n  }\n\n  // sets a state field to an array of this player's teammates\n  getTeammates() {\n    fetch(\n      \"http://localhost:9000/rooms/\" +\n        this.state.roomName +\n        \"/teams/\" +\n        this.state.teamName\n    )\n      .then((res) => res.json())\n      .then((res) => {\n        let players = Object.keys(res.players);\n        let score = res.claims.length;\n        this.setState({ teammates: players, teamScore: score });\n      });\n  }\n\n  // sets a state field to an array of this player's opponents\n  getOpponents() {\n    let opponentTeam;\n    if (this.state.teamName === \"team1\") {\n      opponentTeam = \"team2\";\n    } else {\n      opponentTeam = \"team1\";\n    }\n    fetch(\n      \"http://localhost:9000/rooms/\" +\n        this.state.roomName +\n        \"/teams/\" +\n        opponentTeam\n    )\n      .then((res) => res.json())\n      .then((res) => {\n        let players = Object.keys(res.players);\n        let score = res.claims.length;\n        this.setState({ opponents: players, opponentsScore: score });\n      });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <div>\n            <Logo />\n          </div>\n          <JoinGame\n            rooms={this.state.rooms}\n            setPlayerForApp={this.setPlayer}\n            updateHand={this.updateHand}\n          />\n        </header>\n\n        <div>\n          <h1>Room: {this.state.roomName}</h1>\n          <PlayerPanel\n            teammates={this.state.teammates}\n            teamScore={this.state.teamScore}\n            opponents={this.state.opponents}\n            opponentsScore={this.state.opponentsScore}\n          />\n          <ShowHand hand={this.state.hand} playerName={this.state.playerName} />\n          <AskForCard\n            room={this.state.roomName}\n            team={this.state.teamName}\n            player={this.state.playerName}\n            askCardFunc={askForCard}\n            opponents={this.state.opponents}\n            inSameHalfSuit={inSameHalfSuit}\n          />\n          <MakeClaim\n            room={this.state.roomName}\n            team={this.state.teamName}\n            makeClaimFunc={makeClaim}\n            teammates={this.state.teammates}\n          />\n          <Button variant=\"primary\" onClick={this.refreshState}>\n            Refresh State\n          </Button>\n        </div>\n\n        {/*\n            <p className=\"App-intro\">{this.state.roomName}{this.state.teamName}{this.state.playerName}</p>\n            */}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n","const fetch = require(\"node-fetch\");\n\n// deletes the specified card from the player specified by room, team, and name\n// cards is an array of cards (strings)\nfunction deleteCards(room, team, playerName, cards) {\n  return getPlayerHand(room, team, playerName, (playerHand) => {\n    cards.forEach((card) => {\n      let cardIndex = playerHand.indexOf(card);\n      if (cardIndex > -1) {\n        playerHand.splice(cardIndex, 1);\n      } else {\n        //throw new Error(\"Given card not in given player's hand\")\n      }\n      return fetch(\n        \"http://localhost:9000/rooms/\" +\n          room +\n          \"/teams/\" +\n          team +\n          \"/users/\" +\n          playerName,\n        {\n          headers: {\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/json\",\n          },\n          method: \"PUT\",\n          body: JSON.stringify({ hand: playerHand }),\n        }\n      );\n    });\n  });\n}\n\n// adds the specified card to the hand of the player specified by room, team, and name\nfunction addCard(room, team, playerName, card) {\n  return getPlayerHand(room, team, playerName, (playerHand) => {\n    playerHand.push(card);\n    return fetch(\n      \"http://localhost:9000/rooms/\" +\n        room +\n        \"/teams/\" +\n        team +\n        \"/users/\" +\n        playerName,\n      {\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\",\n        },\n        method: \"PUT\",\n        body: JSON.stringify({ hand: playerHand }),\n      }\n    );\n  });\n}\n\n// performs the action of asking for a card from a player, and the card changing hands\n// if the player asked has it\nfunction askForCard(room, teamAsking, playerAsking, playerAsked, card) {\n  // is the player asking for this card able to ask for this card\n  getPlayerHand(room, teamAsking, playerAsking, (hand) => {\n    let canAsk = hand.reduce((acc, cardInHand) => {\n      return acc || inSameHalfSuit(cardInHand, card)\n    }, false)\n\n    if(!canAsk){\n      alert(`You cannot ask for ${card}`)\n    }\n    else{\n      let teamAsked = teamAsking === \"team1\" ? \"team2\" : \"team1\";\n\n      // does the player being asked have the desired card?\n      getPlayerHand(room, teamAsked, playerAsked, (hand) => {\n        // find out if the askedPlayer's hand contains the desired card\n        let contains = hand.reduce((acc, cardInHand) => {\n          return acc || cardInHand === card;\n        }, false);\n    \n        if (contains) {\n          deleteCards(room, teamAsked, playerAsked, [card]);\n          addCard(room, teamAsking, playerAsking, card);\n        }\n      });\n    }\n  })\n  \n}\n\n// gets the hand of the specified player and performs the given callback function on it\nfunction getPlayerHand(room, team, playerName, callBack) {\n  return fetch(\n    \"http://localhost:9000/rooms/\" +\n      room +\n      \"/teams/\" +\n      team +\n      \"/users/\" +\n      playerName\n  )\n    .then((response) => response.json())\n    .then((jsonResponse) => {\n      let playerHand = jsonResponse.hand;\n\n      callBack(playerHand);\n    });\n}\n\n// checks the validity of the given claim, and if it is valid submits the claim\n// claims is a list of [playerName, card] pairs, or a name:, card: object\nfunction makeClaim(room, team, claims) {\n  // calling the helper, and duplicating the claims array for the accumulator\n  makeClaimHelp(room, team, claims, claims.slice());\n}\n\n// checks the validity of a claim, keeping track of which [player, cards]\n// have yet to be checked, and maintaing the original list of claims for\n// processing should they all be valid claims\nfunction makeClaimHelp(room, team, claims, claimsLeft) {\n  let currentPair = claimsLeft.pop();\n\n  if (currentPair) {\n    let playerName = currentPair[0];\n\n    let cards = currentPair[1];\n\n    getPlayerHand(room, team, playerName, (initHand) => {\n      // find out if the askedPlayer's hand contains the desired card\n      let contains;\n      if (cards) {\n        contains = cards.reduce((acc, cardInHand) => {\n          console.log(\n            `${playerName} has card ${cardInHand}: ${initHand.indexOf(\n              cardInHand > -1\n            )}`\n          );\n          return acc || initHand.indexOf(cardInHand) > -1;\n        }, false);\n      }\n\n      if (contains) {\n        if (claimsLeft.length > 0) {\n          makeClaimHelp(room, team, claims, claimsLeft);\n        } else {\n          // putting the claimed cards together, to be added to the team's claims\n          let completeClaim = [];\n          claims.forEach((claim) => {\n            completeClaim.push(claim[1]);\n          });\n          // turning the completeClaim array of arrays into something to post to the database\n          let completeClaimString = completeClaim.flat().toString();\n\n          fetch(\"http://localhost:9000/rooms/\" + room + \"/teams/\" + team)\n            .then((response) => response.json())\n            .then((jsonResponse) => {\n              let existingClaims = jsonResponse.claims;\n              existingClaims.push(completeClaimString);\n\n              fetch(\"http://localhost:9000/rooms/\" + room + \"/teams/\" + team, {\n                headers: {\n                  Accept: \"application/json\",\n                  \"Content-Type\": \"application/json\",\n                },\n                method: \"PUT\",\n                body: JSON.stringify({ claims: existingClaims }),\n              });\n            });\n\n          claims.forEach((claim) => {\n            let curPlayerName = claim[0];\n            let curCards = claim[1];\n            deleteCards(room, team, curPlayerName, curCards);\n          });\n        }\n      }\n    });\n  }\n}\n\n// all the cards in the game, a 54 card deck\nconst cards = [\n  \"2-H\",\n  \"3-H\",\n  \"4-H\",\n  \"5-H\",\n  \"6-H\",\n  \"7-H\",  \n  \"9-H\",\n  \"10-H\",\n  \"J-H\",\n  \"Q-H\",\n  \"K-H\",\n  \"A-H\",\n  \"2-D\",\n  \"3-D\",\n  \"4-D\",\n  \"5-D\",\n  \"6-D\",\n  \"7-D\",\n  \"9-D\",\n  \"10-D\",\n  \"J-D\",\n  \"Q-D\",\n  \"K-D\",\n  \"A-D\",\n  \"2-S\",\n  \"3-S\",\n  \"4-S\",\n  \"5-S\",\n  \"6-S\",\n  \"7-S\",\n  \"9-S\",\n  \"10-S\",\n  \"J-S\",\n  \"Q-S\",\n  \"K-S\",\n  \"A-S\",\n  \"2-C\",\n  \"3-C\",\n  \"4-C\",\n  \"5-C\",\n  \"6-C\",\n  \"7-C\",\n  \"9-C\",\n  \"10-C\",\n  \"J-C\",\n  \"Q-C\",\n  \"K-C\",\n  \"A-C\",\n  \"8-H\",\n  \"8-D\",\n  \"8-S\",\n  \"8-C\",\n  \"B-J\",\n  \"R-J\",\n];\n\n// are these two cards in the same half suit, and thus the owner\n// of one can ask for the other \nfunction inSameHalfSuit(card1, card2){\n  let card1Index = cards.indexOf(card1)\n  let card2Index = cards.indexOf(card2)\n\n  return (card1Index / 6) === (card2Index / 6)\n}\n\nmodule.exports = { askForCard, makeClaim, inSameHalfSuit };\n"],"sourceRoot":""}