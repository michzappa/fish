{"version":3,"sources":["components/Logo/Logo.js","components/JoinGame/JoinGame.js","components/ShowHand/ShowHand.js","components/AskForCard/AskForCard.js","components/MakeClaim/MakeClaim.js","components/PlayerPanel/PlayerPanel.js","components/ShowLastMove/ShowLastMove.js","components/ShowTurnName/ShowTurnName.js","App.js","index.js","gameMethods.js"],"names":["Logo","JoinGame","props","addRoomClick","bind","joinRoomClick","state","roomToBeMade","roomToBeJoined","joiningPlayerName","placeholder","type","name","value","this","onChange","updateRoomToBeMadeState","Button","variant","size","onClick","updateJoiningRoomState","updateJoiningPlayerState","event","setState","target","fetch","headers","Accept","method","body","JSON","stringify","roomName","playerName","then","res","text","team","alert","setPlayerForApp","updateHand","React","Component","ShowHand","className","hand","AskForCard","opponents","playerAsked","desiredCard","askForCard","id","updatePlayerAskedState","selected","updatedesiredCardState","room","console","log","player","document","getElementById","selectedIndex","askCardFunc","MakeClaim","makeClaim","htmlFor","teammates","teammate1Cards","setTeammate1ClaimState","teammate2Cards","setTeammate2ClaimState","teammate3Cards","setTeammate3ClaimState","listOfCards","split","playerCardsList","push","makeClaimFunc","PlayerPanel","processTeammates","processOpponents","teamScore","opponentsScore","join","ShowLastMove","move","ShowTurnName","turn","App","teamName","setPlayer","refreshState","getTeammates","getOpponents","getLastMove","getTurnName","json","getRoom","setInterval","players","handString","sort","first","second","slice","localeCompare","Object","keys","score","claims","length","opponentTeam","lastMove","currTurn","rooms","inSameHalfSuit","ReactDOM","render","StrictMode","require","deleteCards","cards","getPlayerHand","playerHand","forEach","card","cardIndex","indexOf","splice","callBack","response","jsonResponse","card1","card2","card1Index","card2Index","Math","floor","module","exports","teamAsking","playerAsking","canAsk","reduce","acc","cardInHand","teamAsked","addCard","moveString","cardsInClaim","claim","lastCard","pop","allInSameHalfSuit","makeClaimHelp","claimsLeft","currentPair","initHand","contains","completeClaim","completeClaimString","flat","toString","existingClaims","curPlayerName","curCards"],"mappings":"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","file":"static/js/main.80e4dec9.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Logo.css\";\r\n\r\nfunction Logo() {\r\n  return (\r\n    <div>\r\n      <h1>Fish hello</h1>\r\n      <h4>By: Michael Zappa</h4>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Logo;\r\n","import React from \"react\";\r\nimport { Button } from \"react-bootstrap\";\r\n\r\nclass JoinGame extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.addRoomClick = this.addRoomClick.bind(this);\r\n    this.joinRoomClick = this.joinRoomClick.bind(this);\r\n\r\n    this.state = {\r\n      roomToBeMade: \"\",\r\n      roomToBeJoined: \"\",\r\n      joiningPlayerName: \"\",\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div>\r\n          <form>\r\n            <input\r\n              placeholder=\"Room Name\"\r\n              type=\"text\"\r\n              name=\"Room name\"\r\n              value={this.state.roomToBeMade}\r\n              onChange={this.updateRoomToBeMadeState.bind(this)}\r\n            />\r\n            <Button variant=\"primary\" size=\"lg\" onClick={this.addRoomClick}>\r\n              Submit\r\n            </Button>\r\n          </form>\r\n        </div>\r\n        <div>\r\n          <form>\r\n            <input\r\n              placeholder=\"Room Name\"\r\n              type=\"text\"\r\n              name=\"Room name\"\r\n              value={this.state.roomToBeJoined}\r\n              onChange={this.updateJoiningRoomState.bind(this)}\r\n            />\r\n            <input\r\n              placeholder=\"Player Name\"\r\n              type=\"text\"\r\n              name=\"Player name\"\r\n              value={this.state.joiningPlayerName}\r\n              onChange={this.updateJoiningPlayerState.bind(this)}\r\n            />\r\n            <Button variant=\"primary\" size=\"lg\" onClick={this.joinRoomClick}>\r\n              Submit\r\n            </Button>\r\n          </form>\r\n        </div>\r\n        <div></div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  updateRoomToBeMadeState(event) {\r\n    this.setState({ roomToBeMade: event.target.value });\r\n  }\r\n\r\n  updateJoiningRoomState(event) {\r\n    this.setState({ roomToBeJoined: event.target.value });\r\n  }\r\n\r\n  updateJoiningPlayerState(event) {\r\n    this.setState({ joiningPlayerName: event.target.value });\r\n  }\r\n\r\n  // posts the room represented by the state of this component\r\n  addRoomClick() {\r\n    fetch(\"https://fish-backend.herokuapp.com/rooms/\", {\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      method: \"POST\",\r\n      body: JSON.stringify({ name: this.state.roomToBeMade }),\r\n    });\r\n\r\n    this.setState({\r\n      roomToBeMade: \"\",\r\n      roomToBeJoined: \"\",\r\n      joiningPlayerName: \"\",\r\n    });\r\n  }\r\n\r\n  // posts the player to the room represented by the state of this component\r\n  joinRoomClick() {\r\n    let roomName = this.state.roomToBeJoined;\r\n    let playerName = this.state.joiningPlayerName;\r\n    fetch(\"https://fish-backend.herokuapp.com/rooms/\" + roomName, {\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      method: \"POST\",\r\n      body: JSON.stringify({ name: playerName }),\r\n    })\r\n      .then((res) => res.text())\r\n      .then((team) => {\r\n        if (team === \"Given room does not exist\") {\r\n          alert(\"Please enter a room which has been created\");\r\n        } else {\r\n          this.props.setPlayerForApp(roomName, team, playerName);\r\n          this.props.updateHand();\r\n          this.setState({\r\n            roomToBeMade: \"\",\r\n            roomToBeJoined: \"\",\r\n            joiningPlayerName: \"\",\r\n          });\r\n        }\r\n      });\r\n  }\r\n}\r\n\r\nexport default JoinGame;\r\n","import React from \"react\";\r\n\r\nclass ShowHand extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {};\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>{this.props.playerName}'s Hand</h1>\r\n        <p className=\"App-intro\">{this.props.hand}</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ShowHand;\r\n","import React from \"react\";\r\nimport { Button } from \"react-bootstrap\";\r\n\r\n// an interface to ask an opponent player for a specific card\r\nclass AskForCard extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = { opponents: [], playerAsked: \"\", desiredCard: \"\" };\r\n\r\n    this.askForCard = this.askForCard.bind(this);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>Ask a Player for a Card</h1>\r\n        <form>\r\n          <select\r\n            id=\"choose-opponent\"\r\n            onChange={this.updatePlayerAskedState.bind(this)}\r\n          >\r\n            <option selected=\"selected\">Select Opponent</option>\r\n            <option value={this.props.opponents[0]}>\r\n              {this.props.opponents[0]}\r\n            </option>\r\n            <option value={this.props.opponents[1]}>\r\n              {this.props.opponents[1]}\r\n            </option>\r\n            <option value={this.props.opponents[2]}>\r\n              {this.props.opponents[2]}\r\n            </option>\r\n          </select>\r\n          <input\r\n            placeholder=\"Card\"\r\n            type=\"text\"\r\n            name=\"card\"\r\n            value={this.state.desiredCard}\r\n            onChange={this.updatedesiredCardState.bind(this)}\r\n          />\r\n          <Button variant=\"primary\" size=\"lg\" onClick={this.askForCard}>\r\n            Ask for Card\r\n          </Button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // sets the playerAsked state\r\n  updatePlayerAskedState(event) {\r\n    this.setState({ playerAsked: event.target.value });\r\n  }\r\n\r\n  // sets the desired card state\r\n  updatedesiredCardState(event) {\r\n    this.setState({ desiredCard: event.target.value });\r\n  }\r\n\r\n  // uses the state to ask the player for the desired card\r\n  askForCard() {\r\n    fetch(\"https://fish-backend.herokuapp.com/rooms/\" + this.props.room + \"/turn/\")\r\n      .then((res) => res.text())\r\n      .then((res) => {\r\n        console.log(res + \"   \" + this.props.player);\r\n        if (res === this.props.player) {\r\n          document.getElementById(\"choose-opponent\").selectedIndex = 0;\r\n          if (\r\n            this.state.playerAsked !== \"Select Opponent\" &&\r\n            this.state.playerAsked !== \"\"\r\n          ) {\r\n            this.props.askCardFunc(\r\n              this.props.room,\r\n              this.props.team,\r\n              this.props.player,\r\n              this.state.playerAsked,\r\n              this.state.desiredCard\r\n            );\r\n          }\r\n          this.setState({ playerAsked: \"\", desiredCard: \"\" });\r\n        }\r\n      });\r\n  }\r\n}\r\n\r\nexport default AskForCard;\r\n","import React from \"react\";\r\nimport { Button } from \"react-bootstrap\";\r\n\r\nclass MakeClaim extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {};\r\n\r\n    this.makeClaim = this.makeClaim.bind(this);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>\r\n          Make Claim, enter cards for each teammate<br></br> separated by\r\n          commas: \"card,card,card,card,card,card\"\r\n        </h1>\r\n        <form>\r\n          <label htmlFor=\"name1\">{this.props.teammates[0]}</label>\r\n          <input\r\n            placeholder=\"cards\"\r\n            type=\"text\"\r\n            id=\"name1\"\r\n            value={this.state.teammate1Cards}\r\n            onChange={this.setTeammate1ClaimState.bind(this)}\r\n          />\r\n          <label htmlFor=\"name1\">{this.props.teammates[1]}</label>\r\n          <input\r\n            placeholder=\"cards\"\r\n            type=\"text\"\r\n            id=\"name2\"\r\n            value={this.state.teammate2Cards}\r\n            onChange={this.setTeammate2ClaimState.bind(this)}\r\n          />\r\n          <label htmlFor=\"name1\">{this.props.teammates[2]}</label>\r\n          <input\r\n            placeholder=\"cards\"\r\n            type=\"text\"\r\n            id=\"name3\"\r\n            value={this.state.teammate3Cards}\r\n            onChange={this.setTeammate3ClaimState.bind(this)}\r\n          />\r\n          <Button variant=\"primary\" size=\"lg\" onClick={this.makeClaim}>\r\n            Submit Claim\r\n          </Button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // sets a state for the cards claimed to be had by teammate 1\r\n  setTeammate1ClaimState(event) {\r\n    let listOfCards = event.target.value.split(\",\");\r\n    this.setState({ teammate1Cards: listOfCards });\r\n  }\r\n\r\n  // sets a state for the cards claimed to be had by teammate 2\r\n  setTeammate2ClaimState(event) {\r\n    let listOfCards = event.target.value.split(\",\");\r\n    this.setState({ teammate2Cards: listOfCards });\r\n  }\r\n\r\n  // sets a state for the cards claimed to be had by teammate 3\r\n  setTeammate3ClaimState(event) {\r\n    let listOfCards = event.target.value.split(\",\");\r\n    this.setState({ teammate3Cards: listOfCards });\r\n  }\r\n\r\n  // takes the cards claimed in the state and attempts to make the claim,\r\n  // if it is a good claim the cards are removed from the players' hands\r\n  // and added to this team's claims tally\r\n  makeClaim() {\r\n    let playerCardsList = [];\r\n    if (this.state.teammate1Cards) {\r\n      playerCardsList.push([\r\n        this.props.teammates[0],\r\n        this.state.teammate1Cards,\r\n      ]);\r\n    }\r\n    if (this.state.teammate2Cards) {\r\n      playerCardsList.push([\r\n        this.props.teammates[1],\r\n        this.state.teammate2Cards,\r\n      ]);\r\n    }\r\n    if (this.state.teammate3Cards) {\r\n      playerCardsList.push([\r\n        this.props.teammates[2],\r\n        this.state.teammate3Cards,\r\n      ]);\r\n    }\r\n\r\n    console.log(playerCardsList);\r\n    this.props.makeClaimFunc(this.props.room, this.props.team, playerCardsList);\r\n\r\n    this.setState({\r\n      teammate1Cards: \"\",\r\n      teammate2Cards: \"\",\r\n      teammate3Cards: \"\",\r\n    });\r\n  }\r\n}\r\n\r\nexport default MakeClaim;\r\n","import React from \"react\";\r\n\r\n// shows the teammates and opponents of the player of this app\r\nclass PlayerPanel extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.processTeammates = this.processTeammates.bind(this);\r\n    this.processOpponents = this.processOpponents.bind(this);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h2>\r\n          Teammates: {this.processTeammates()} <br></br>Score:{\" \"}\r\n          {this.props.teamScore}\r\n        </h2>\r\n        <h2>\r\n          Opponents: {this.processOpponents()} <br></br>Score:{\" \"}\r\n          {this.props.opponentsScore}\r\n        </h2>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // turns list of players into a string\r\n  processTeammates() {\r\n    if (this.props.teammates) {\r\n      return this.props.teammates.join(\", \");\r\n    }\r\n  }\r\n\r\n  // turns list of players into a string\r\n  processOpponents() {\r\n    if (this.props.opponents) {\r\n      return this.props.opponents.join(\", \");\r\n    }\r\n  }\r\n}\r\n\r\nexport default PlayerPanel;\r\n","import React from \"react\";\r\n\r\nclass ShowLastMove extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>Last move: {this.props.move}</h1>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ShowLastMove;\r\n","import React from \"react\";\r\n\r\nclass ShowTurnName extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>Current Turn: {this.props.turn}</h1>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ShowTurnName;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport Logo from \"./components/Logo/Logo\";\r\nimport JoinGame from \"./components/JoinGame/JoinGame\";\r\nimport ShowHand from \"./components/ShowHand/ShowHand\";\r\nimport AskForCard from \"./components/AskForCard/AskForCard\";\r\nimport MakeClaim from \"./components/MakeClaim/MakeClaim\";\r\nimport PlayerPanel from \"./components/PlayerPanel/PlayerPanel\";\r\nimport ShowLastMove from \"./components/ShowLastMove/ShowLastMove\";\r\nimport ShowTurnName from \"./components/ShowTurnName/ShowTurnName\";\r\n\r\nimport { askForCard, makeClaim, inSameHalfSuit } from \"./gameMethods\";\r\n\r\n// the main App of this Fish game, keeps the state, which is passed to children components\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      room: \"\",\r\n      team: \"\",\r\n      player: \"\",\r\n      teammates: [],\r\n      opponents: [],\r\n      move: \"\",\r\n      turn: \"\",\r\n      roomName: \"\",\r\n      teamName: \"\",\r\n      playerName: \"\",\r\n    };\r\n\r\n    this.setPlayer = this.setPlayer.bind(this);\r\n    this.updateHand = this.updateHand.bind(this);\r\n    this.refreshState = this.refreshState.bind(this);\r\n    this.getTeammates = this.getTeammates.bind(this);\r\n    this.getOpponents = this.getOpponents.bind(this);\r\n    this.getLastMove = this.getLastMove.bind(this);\r\n    this.getTurnName = this.getTurnName.bind(this);\r\n  }\r\n\r\n  // sets a state field to be the overall JSON object for the room\r\n  // this webapp is playing in from the server\r\n  getRoom() {\r\n    fetch(\"https://fish-backend.herokuapp.com/rooms/\" + this.state.roomName)\r\n      .then((res) => res.json())\r\n      .then((res) => {\r\n        console.log(res);\r\n        this.setState({ room: res });\r\n      });\r\n  }\r\n\r\n  // sets getDatabase upon startup\r\n  componentWillMount() {\r\n    this.getRoom();\r\n\r\n    setInterval(this.refreshState, 500); // runs every 5 seconds.\r\n  }\r\n\r\n  // refreshes the state of this web app from the data in the server\r\n  refreshState() {\r\n    this.getRoom();\r\n    this.updateHand();\r\n    this.getTeammates();\r\n    this.getOpponents();\r\n    this.getLastMove();\r\n    this.getTurnName();\r\n  }\r\n\r\n  // sets the room and player of the player of this web app\r\n  setPlayer(room, team, player) {\r\n    this.setState({ roomName: room, teamName: team, playerName: player });\r\n    this.getTeammates();\r\n    this.getOpponents();\r\n    this.getLastMove();\r\n    this.getTurnName();\r\n  }\r\n\r\n  // updates the state of the hand, which is given to the ShowHand component\r\n  updateHand() {\r\n    this.getRoom();\r\n    if (!this.state.room[this.state.teamName]) {\r\n    } else {\r\n      if (\r\n        !this.state.room[this.state.teamName].players[this.state.playerName]\r\n      ) {\r\n      } else {\r\n        let hand = this.state.room[this.state.teamName].players[\r\n          this.state.playerName\r\n        ].hand;\r\n        let sortedBySuit = hand.sort((first, second) => {\r\n          return first.slice(-1).localeCompare(second.slice(-1));\r\n        });\r\n        // sorting by card number, preserving order of suits\r\n        let sortedByNumber = sortedBySuit.sort((first, second) => {\r\n          if (first.slice(-1).localeCompare(second.slice(-1)) === 0) {\r\n            return first.slice(0, 2).localeCompare(second.slice(0, 2));\r\n          }\r\n          return first.slice(-1).localeCompare(second.slice(-1));\r\n        });\r\n        let handString = sortedByNumber.join(\", \");\r\n        this.setState({ hand: handString });\r\n      }\r\n    }\r\n  }\r\n\r\n  // sets a state field to an array of this player's teammates\r\n  getTeammates() {\r\n    let team = this.state.room[this.state.teamName];\r\n    if (team) {\r\n      let players = Object.keys(team.players);\r\n      let score = team.claims.length;\r\n      this.setState({ teammates: players, teamScore: score });\r\n    }\r\n  }\r\n\r\n  // sets a state field to an array of this player's opponents\r\n  getOpponents() {\r\n    let opponentTeam;\r\n    if (this.state.teamName === \"team1\") {\r\n      opponentTeam = this.state.room[\"team2\"];\r\n    } else {\r\n      opponentTeam = this.state.room[\"team1\"];\r\n    }\r\n    if (opponentTeam) {\r\n      let players = Object.keys(opponentTeam.players);\r\n      let score = opponentTeam.claims.length;\r\n      this.setState({ opponents: players, opponentsScore: score });\r\n      this.setState({\r\n        opponents: players,\r\n        opponentsScore: opponentTeam.claims.length,\r\n      });\r\n    }\r\n  }\r\n\r\n  // updates the state of this app with the last move performed in this game room\r\n  getLastMove() {\r\n    if (this.state.room.move) {\r\n      let lastMove = this.state.room.move;\r\n      this.setState({ move: lastMove });\r\n    }\r\n  }\r\n\r\n  // updates the state of this app with the player whose turn it is in this game room\r\n  getTurnName() {\r\n    if (this.state.room.turn) {\r\n      let currTurn = this.state.room.turn;\r\n      this.setState({ turn: currTurn });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <div>\r\n            <Logo />\r\n          </div>\r\n          <JoinGame\r\n            rooms={this.state.rooms}\r\n            setPlayerForApp={this.setPlayer}\r\n            updateHand={this.updateHand}\r\n          />\r\n        </header>\r\n\r\n        <div className=\"game-information\">\r\n          <div className=\"game-stat\">\r\n            <h1>Room: {this.state.roomName}</h1>\r\n          </div>\r\n          <div className=\"game-stat\">\r\n            <PlayerPanel\r\n              teammates={this.state.teammates}\r\n              teamScore={this.state.teamScore}\r\n              opponents={this.state.opponents}\r\n              opponentsScore={this.state.opponentsScore}\r\n            />\r\n          </div>\r\n          <div className=\"game-stat\">\r\n            <ShowHand\r\n              hand={this.state.hand}\r\n              playerName={this.state.playerName}\r\n            />\r\n          </div>\r\n          <div className=\"game-stat\">\r\n            <ShowLastMove move={this.state.move} />\r\n          </div>\r\n          <div className=\"game-stat\">\r\n            <ShowTurnName turn={this.state.turn} />\r\n          </div>\r\n        </div>\r\n\r\n        <div>\r\n          <AskForCard\r\n            room={this.state.roomName}\r\n            team={this.state.teamName}\r\n            player={this.state.playerName}\r\n            askCardFunc={askForCard}\r\n            opponents={this.state.opponents}\r\n            inSameHalfSuit={inSameHalfSuit}\r\n          />\r\n          <MakeClaim\r\n            room={this.state.roomName}\r\n            team={this.state.teamName}\r\n            makeClaimFunc={makeClaim}\r\n            teammates={this.state.teammates}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n","const fetch = require(\"node-fetch\");\r\n\r\n// deletes the specified card from the player specified by room, team, and name\r\n// cards is an array of cards (strings)\r\nfunction deleteCards(room, team, playerName, cards) {\r\n  return getPlayerHand(room, team, playerName, (playerHand) => {\r\n    cards.forEach((card) => {\r\n      let cardIndex = playerHand.indexOf(card);\r\n      if (cardIndex > -1) {\r\n        playerHand.splice(cardIndex, 1);\r\n      } else {\r\n        //throw new Error(\"Given card not in given player's hand\")\r\n      }\r\n      return fetch(\r\n        \"https://fish-backend.herokuapp.com/rooms/\" +\r\n          room +\r\n          \"/teams/\" +\r\n          team +\r\n          \"/users/\" +\r\n          playerName,\r\n        {\r\n          headers: {\r\n            Accept: \"application/json\",\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          method: \"PUT\",\r\n          body: JSON.stringify({ hand: playerHand }),\r\n        }\r\n      );\r\n    });\r\n  });\r\n}\r\n\r\n// adds the specified card to the hand of the player specified by room, team, and name\r\nfunction addCard(room, team, playerName, card) {\r\n  return getPlayerHand(room, team, playerName, (playerHand) => {\r\n    playerHand.push(card);\r\n    return fetch(\r\n      \"https://fish-backend.herokuapp.com/rooms/\" +\r\n        room +\r\n        \"/teams/\" +\r\n        team +\r\n        \"/users/\" +\r\n        playerName,\r\n      {\r\n        headers: {\r\n          Accept: \"application/json\",\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        method: \"PUT\",\r\n        body: JSON.stringify({ hand: playerHand }),\r\n      }\r\n    );\r\n  });\r\n}\r\n\r\n// performs the action of asking for a card from a player, and the card changing hands\r\n// if the player asked has it\r\nfunction askForCard(room, teamAsking, playerAsking, playerAsked, card) {\r\n  // is the player asking for this card able to ask for this card\r\n  getPlayerHand(room, teamAsking, playerAsking, (hand) => {\r\n    let canAsk = hand.reduce((acc, cardInHand) => {\r\n      console.log(\r\n        cardInHand + \"   \" + card + \"   \" + inSameHalfSuit(cardInHand, card)\r\n      );\r\n      return acc || inSameHalfSuit(cardInHand, card);\r\n    }, false);\r\n    console.log(canAsk);\r\n    if (canAsk === false) {\r\n      alert(`You cannot ask for ${card}`);\r\n    } else {\r\n      let teamAsked = teamAsking === \"team1\" ? \"team2\" : \"team1\";\r\n\r\n      // does the player being asked have the desired card?\r\n      getPlayerHand(room, teamAsked, playerAsked, (hand) => {\r\n        // find out if the askedPlayer's hand contains the desired card\r\n        let contains = hand.reduce((acc, cardInHand) => {\r\n          return acc || cardInHand === card;\r\n        }, false);\r\n\r\n        if (contains) {\r\n          deleteCards(room, teamAsked, playerAsked, [card]);\r\n          addCard(room, teamAsking, playerAsking, card);\r\n\r\n          let moveString = `${playerAsking} asked for the ${card} from ${playerAsked}, and received it.`;\r\n          fetch(\"https://fish-backend.herokuapp.com/rooms/\" + room + \"/move/\", {\r\n            headers: {\r\n              Accept: \"application/json\",\r\n              \"Content-Type\": \"application/json\",\r\n            },\r\n            method: \"PUT\",\r\n            body: JSON.stringify({ move: moveString }),\r\n          });\r\n\r\n          // setting the next turn to be for playerAsking\r\n          fetch(\"https://fish-backend.herokuapp.com/rooms/\" + room + \"/turn/\", {\r\n            headers: {\r\n              Accept: \"application/json\",\r\n              \"Content-Type\": \"application/json\",\r\n            },\r\n            method: \"PUT\",\r\n            body: JSON.stringify({ turn: playerAsking }),\r\n          });\r\n        } else {\r\n          let moveString = `${playerAsking} asked for the ${card} from ${playerAsked}, but ${playerAsked} did not have it.`;\r\n          fetch(\"https://fish-backend.herokuapp.com/rooms/\" + room + \"/move/\", {\r\n            headers: {\r\n              Accept: \"application/json\",\r\n              \"Content-Type\": \"application/json\",\r\n            },\r\n            method: \"PUT\",\r\n            body: JSON.stringify({ move: moveString }),\r\n          });\r\n\r\n          // setting the next turn to be for the player asked, as they didn't have the requested card\r\n          fetch(\"https://fish-backend.herokuapp.com/rooms/\" + room + \"/turn/\", {\r\n            headers: {\r\n              Accept: \"application/json\",\r\n              \"Content-Type\": \"application/json\",\r\n            },\r\n            method: \"PUT\",\r\n            body: JSON.stringify({ turn: playerAsked }),\r\n          });\r\n        }\r\n      });\r\n    }\r\n  });\r\n}\r\n\r\n// gets the hand of the specified player and performs the given callback function on it\r\nfunction getPlayerHand(room, team, playerName, callBack) {\r\n  return fetch(\r\n    \"https://fish-backend.herokuapp.com/rooms/\" +\r\n      room +\r\n      \"/teams/\" +\r\n      team +\r\n      \"/users/\" +\r\n      playerName\r\n  )\r\n    .then((response) => response.json())\r\n    .then((jsonResponse) => {\r\n      let playerHand = jsonResponse.hand;\r\n\r\n      callBack(playerHand);\r\n    });\r\n}\r\n\r\n// checks the validity of the given claim, and if it is valid submits the claim\r\n// claims is a list of [playerName, card] pairs, or a name:, card: object\r\nfunction makeClaim(room, team, claims) {\r\n  // checking to see if all the cards are in the same half suit, and there are six of them,\r\n  // as in a valid claim\r\n  let cardsInClaim = [];\r\n  claims.forEach((claim) => {\r\n    claim[1].forEach((card) => {\r\n      cardsInClaim.push(card);\r\n    });\r\n  });\r\n\r\n  console.log(cardsInClaim);\r\n\r\n  // if all the cards could be a valid claim, then we check if each player has what they\r\n  // are said to have. ALSO CJECK IF CARDS IN CLAIM IS 6 LONG\r\n  if (allInSameHalfSuit(cardsInClaim)) {\r\n    // calling the helper, and duplicating the claims array for the accumulator\r\n    makeClaimHelp(room, team, claims, claims.slice());\r\n  }\r\n}\r\n\r\n// checks the validity of a claim, keeping track of which [player, cards]\r\n// have yet to be checked, and maintaing the original list of claims for\r\n// processing should they all be valid claims\r\nfunction makeClaimHelp(room, team, claims, claimsLeft) {\r\n  let currentPair = claimsLeft.pop();\r\n\r\n  if (currentPair) {\r\n    let playerName = currentPair[0];\r\n\r\n    let cards = currentPair[1];\r\n\r\n    getPlayerHand(room, team, playerName, (initHand) => {\r\n      // find out if the askedPlayer's hand contains the desired card\r\n      let contains;\r\n      if (cards) {\r\n        contains = cards.reduce((acc, cardInHand) => {\r\n          console.log(\r\n            `${playerName} has card ${cardInHand}: ${initHand.indexOf(\r\n              cardInHand > -1\r\n            )}`\r\n          );\r\n          return acc || initHand.indexOf(cardInHand) > -1;\r\n        }, false);\r\n      }\r\n\r\n      if (contains) {\r\n        if (claimsLeft.length > 0) {\r\n          makeClaimHelp(room, team, claims, claimsLeft);\r\n        } else {\r\n          // putting the claimed cards together, to be added to the team's claims\r\n          let completeClaim = [];\r\n          claims.forEach((claim) => {\r\n            completeClaim.push(claim[1]);\r\n          });\r\n          // turning the completeClaim array of arrays into something to post to the database\r\n          let completeClaimString = completeClaim.flat().toString();\r\n\r\n          // putting the claim into the team's claim field\r\n          fetch(\"https://fish-backend.herokuapp.com/rooms/\" + room + \"/teams/\" + team)\r\n            .then((response) => response.json())\r\n            .then((jsonResponse) => {\r\n              let existingClaims = jsonResponse.claims;\r\n              existingClaims.push(completeClaimString);\r\n\r\n              fetch(\"https://fish-backend.herokuapp.com/rooms/\" + room + \"/teams/\" + team, {\r\n                headers: {\r\n                  Accept: \"application/json\",\r\n                  \"Content-Type\": \"application/json\",\r\n                },\r\n                method: \"PUT\",\r\n                body: JSON.stringify({ claims: existingClaims }),\r\n              });\r\n            });\r\n\r\n          claims.forEach((claim) => {\r\n            let curPlayerName = claim[0];\r\n            let curCards = claim[1];\r\n            deleteCards(room, team, curPlayerName, curCards);\r\n          });\r\n\r\n          // setting the last move to be this claim being made\r\n          let moveString = `${team} made the claim ${completeClaimString}.`;\r\n          fetch(\"https://fish-backend.herokuapp.com/rooms/\" + room + \"/move/\", {\r\n            headers: {\r\n              Accept: \"application/json\",\r\n              \"Content-Type\": \"application/json\",\r\n            },\r\n            method: \"PUT\",\r\n            body: JSON.stringify({ move: moveString }),\r\n          });\r\n        }\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\n// all the cards in the game, a 54 card deck\r\nconst cards = [\r\n  \"2-H\",\r\n  \"3-H\",\r\n  \"4-H\",\r\n  \"5-H\",\r\n  \"6-H\",\r\n  \"7-H\",\r\n  \"9-H\",\r\n  \"10-H\",\r\n  \"J-H\",\r\n  \"Q-H\",\r\n  \"K-H\",\r\n  \"A-H\",\r\n  \"2-D\",\r\n  \"3-D\",\r\n  \"4-D\",\r\n  \"5-D\",\r\n  \"6-D\",\r\n  \"7-D\",\r\n  \"9-D\",\r\n  \"10-D\",\r\n  \"J-D\",\r\n  \"Q-D\",\r\n  \"K-D\",\r\n  \"A-D\",\r\n  \"2-S\",\r\n  \"3-S\",\r\n  \"4-S\",\r\n  \"5-S\",\r\n  \"6-S\",\r\n  \"7-S\",\r\n  \"9-S\",\r\n  \"10-S\",\r\n  \"J-S\",\r\n  \"Q-S\",\r\n  \"K-S\",\r\n  \"A-S\",\r\n  \"2-C\",\r\n  \"3-C\",\r\n  \"4-C\",\r\n  \"5-C\",\r\n  \"6-C\",\r\n  \"7-C\",\r\n  \"9-C\",\r\n  \"10-C\",\r\n  \"J-C\",\r\n  \"Q-C\",\r\n  \"K-C\",\r\n  \"A-C\",\r\n  \"8-H\",\r\n  \"8-D\",\r\n  \"8-S\",\r\n  \"8-C\",\r\n  \"B-J\",\r\n  \"R-J\",\r\n];\r\n\r\n// are these two cards in the same half suit, and thus the owner\r\n// of one can ask for the other. But it returns false if the two\r\n// cards are the same card\r\nfunction inSameHalfSuit(card1, card2) {\r\n  let card1Index = cards.indexOf(card1);\r\n  let card2Index = cards.indexOf(card2);\r\n\r\n  console.log(card1Index / 6 + \"  \" + card2Index / 6);\r\n  if (card1Index === card2Index) {\r\n    return false;\r\n  }\r\n  return Math.floor(card1Index / 6) === Math.floor(card2Index / 6);\r\n}\r\n\r\n// are all of the cards in the given list in the same half suit?\r\nfunction allInSameHalfSuit(cards) {\r\n  let lastCard = cards.pop();\r\n  console.log(\"Last card: \" + lastCard);\r\n\r\n  let allInSameHalfSuit = cards.reduce((acc, card) => {\r\n    console.log(\"card being checked: \" + card);\r\n    return acc && inSameHalfSuit(lastCard, card);\r\n  }, true);\r\n  console.log(allInSameHalfSuit);\r\n  return allInSameHalfSuit;\r\n}\r\n\r\n// updates the state of the hand, which is given to the ShowHand component\r\nfunction updateHand() {\r\n  fetch(\r\n    \"https://fish-backend.herokuapp.com/rooms/\" +\r\n      this.state.roomName +\r\n      \"/teams/\" +\r\n      this.state.teamName +\r\n      \"/users/\" +\r\n      this.state.playerName\r\n  )\r\n    .then((res) => res.json())\r\n    .then((res) => {\r\n      // sorting cards by suit\r\n      let sortedBySuit = res.hand.sort((first, second) => {\r\n        return first.slice(-1).localeCompare(second.slice(-1));\r\n      });\r\n      // sorting by card number, preserving order of suits\r\n      let sortedByNumber = sortedBySuit.sort((first, second) => {\r\n        if (first.slice(-1).localeCompare(second.slice(-1)) === 0) {\r\n          return first.slice(0, 2).localeCompare(second.slice(0, 2));\r\n        }\r\n        return first.slice(-1).localeCompare(second.slice(-1));\r\n      });\r\n      let handString = sortedByNumber.join(\", \");\r\n      this.setState({ hand: handString });\r\n    });\r\n}\r\n\r\n// sets a state field to an array of this player's teammates\r\nfunction getTeammates() {\r\n  fetch(\r\n    \"https://fish-backend.herokuapp.com/rooms/\" +\r\n      this.state.roomName +\r\n      \"/teams/\" +\r\n      this.state.teamName\r\n  )\r\n    .then((res) => res.json())\r\n    .then((res) => {\r\n      let players = Object.keys(res.players);\r\n      let score = res.claims.length;\r\n      this.setState({ teammates: players, teamScore: score });\r\n    });\r\n}\r\n\r\n// sets a state field to an array of this player's opponents\r\nfunction getOpponents() {\r\n  let opponentTeam;\r\n  if (this.state.teamName === \"team1\") {\r\n    opponentTeam = \"team2\";\r\n  } else {\r\n    opponentTeam = \"team1\";\r\n  }\r\n  fetch(\r\n    \"https://fish-backend.herokuapp.com/rooms/\" +\r\n      this.state.roomName +\r\n      \"/teams/\" +\r\n      opponentTeam\r\n  )\r\n    .then((res) => res.json())\r\n    .then((res) => {\r\n      let players = Object.keys(res.players);\r\n      let score = res.claims.length;\r\n      this.setState({ opponents: players, opponentsScore: score });\r\n    });\r\n}\r\n\r\nmodule.exports = {\r\n  askForCard,\r\n  makeClaim,\r\n  inSameHalfSuit,\r\n  updateHand,\r\n  getTeammates,\r\n  getOpponents,\r\n};\r\n"],"sourceRoot":""}